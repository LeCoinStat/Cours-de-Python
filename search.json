[
  {
    "objectID": "doc/cours/intro.html",
    "href": "doc/cours/intro.html",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "",
    "text": "18h : CM+TP\nContact : natachayepnga@gmail.com\nOutils recommandés : VS Code, Jupyter Notebook"
  },
  {
    "objectID": "doc/cours/intro.html#programmation-avec-python-bases-et-applications",
    "href": "doc/cours/intro.html#programmation-avec-python-bases-et-applications",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "",
    "text": "18h : CM+TP\nContact : natachayepnga@gmail.com\nOutils recommandés : VS Code, Jupyter Notebook"
  },
  {
    "objectID": "doc/cours/intro.html#objectifs",
    "href": "doc/cours/intro.html#objectifs",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Objectifs",
    "text": "Objectifs\n\nComprendre les bases du langage Python.\nManipuler les variables, types de données et structures de contrôle.\nExplorer les bibliothèques populaires : NumPy, Pandas, Matplotlib.\nIntroduire les concepts de machine learning avec Scikit-learn.\nRéaliser un projet intégrant toutes les notions vues."
  },
  {
    "objectID": "doc/cours/intro.html#python",
    "href": "doc/cours/intro.html#python",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Python",
    "text": "Python\n\nLangage polyvalent : data science, machine learning, développement web, automatisation.\nAvantages :\n\nSyntaxe simple et claire.\nLarge écosystème de bibliothèques open source.\nUtilisé par des entreprises, start-ups, et dans la recherche académique."
  },
  {
    "objectID": "doc/cours/intro.html#organisation-des-tp",
    "href": "doc/cours/intro.html#organisation-des-tp",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Organisation des TP",
    "text": "Organisation des TP\n\n5 TP + 1 projet final\nEnvironnements : VS Code, Jupyter Notebook, Google Colab.\nApproche : Alternance entre exercices guidés et explorations libres.\nLes projets doivent suivre une structuration rigoureuse :\n\nNettoyage des données.\nVisualisation.\nAnalyse et modélisation."
  },
  {
    "objectID": "doc/cours/intro.html#ce-quil-faut-faire",
    "href": "doc/cours/intro.html#ce-quil-faut-faire",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Ce qu’il faut faire",
    "text": "Ce qu’il faut faire\n\nLisez attentivement les consignes de chaque TP.\nEssayez de résoudre les exercices par vous-même.\nRecherchez dans les cours et tutoriels en ligne.\nTravaillez en binôme pour échanger des idées.\nPosez des questions à l’enseignante en cas de blocage."
  },
  {
    "objectID": "doc/cours/intro.html#à-ne-pas-faire",
    "href": "doc/cours/intro.html#à-ne-pas-faire",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "À ne pas faire",
    "text": "À ne pas faire\n\nUtiliser ChatGPT sans comprendre la solution.\nCopier/coller des réponses sans vérifier leur validité.\nNe pas documenter votre code ou vos démarches.\n\n\nNote : Ces pratiques nuisent à l’apprentissage et à la compréhension."
  },
  {
    "objectID": "doc/cours/intro.html#évaluation",
    "href": "doc/cours/intro.html#évaluation",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Évaluation",
    "text": "Évaluation\n\nPartie 1 : Projet à faire à la maison.\n\nSujet distribué une semaine avant la date de l’examen.\nAnalyse et exploration d’un dataset fourni.\nÀ rendre sous forme d’un notebook bien structuré :\n\nExplication des étapes de nettoyage.\nVisualisation des données et interprétation.\nConclusions et recommandations.\n\n\nPartie 2 : QCM.\n\nDurée : 2h.\nQuestions portant sur les concepts abordés pendant le cours et les TP.\nLa date sera définie à l’avance."
  },
  {
    "objectID": "doc/cours/intro.html#bibliographie",
    "href": "doc/cours/intro.html#bibliographie",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nDocumentation officielle Python\nPython for Everybody\nGoogle Colab\nPython Crash Course (Livre)\nSite\nSite officiel Python\nTutoriel de la documentation officielle en ligne\nMémento Bases Python 3 de Laurent POINTAL, 2012-2013\nAbrégé Dense Python 3.2 de Laurent POINTAL, 2012\nA Quick, Painless Tutorial on the Python Language de Norman Matloff, 2008 (PDF)\nTutoriels Python en ligne\nDernière version de Python et interface IDLE\nOutil IEP (Interactive Editor for Python)\nThink Python - How to Think Like a Computer Scientist d’Allen B. Downey, 2014\nApprendre à programmer avec Python de Gérard Swinnen, 2009\nUne introduction à Python 3 de Robert CORDEAU et Laurent POINTAL, 2010\nCours Python de l’École Polytechnique Universitaire UMPC\nDocumentation sur l’intégration C/C++/Python\nPython Development with PyDev and Eclipse - Tutorial de Lars Vogel, 2011\nApprenez à programmer en Python - Site du Zéro - Vincent Le Goff, 2011\nAssociation francophone Python"
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#programmation-avec-python-bases-et-applications",
    "href": "doc/cours/intro-python-slides.html#programmation-avec-python-bases-et-applications",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Programmation avec Python : Bases et Applications",
    "text": "Programmation avec Python : Bases et Applications\n\n18h : CM+TP\nContact : natachayepnga@gmail.com\nOutils recommandés : VS Code, Jupyter Notebook"
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#objectifs",
    "href": "doc/cours/intro-python-slides.html#objectifs",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Objectifs",
    "text": "Objectifs\n\nComprendre les bases du langage Python.\nManipuler les variables, types de données et structures de contrôle.\nExplorer les bibliothèques populaires : NumPy, Pandas, Matplotlib.\nIntroduire les concepts de machine learning avec Scikit-learn.\nRéaliser un projet intégrant toutes les notions vues."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#python",
    "href": "doc/cours/intro-python-slides.html#python",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Python",
    "text": "Python\n\nLangage polyvalent : data science, machine learning, développement web, automatisation.\nAvantages :\n\nSyntaxe simple et claire.\nLarge écosystème de bibliothèques open source.\nUtilisé par des entreprises, start-ups, et dans la recherche académique."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#organisation-des-tp",
    "href": "doc/cours/intro-python-slides.html#organisation-des-tp",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Organisation des TP",
    "text": "Organisation des TP\n\n5 TP + 1 projet final\nEnvironnements : VS Code, Jupyter Notebook, Google Colab.\nApproche : Alternance entre exercices guidés et explorations libres.\nLes projets doivent suivre une structuration rigoureuse :\n\nNettoyage des données.\nVisualisation.\nAnalyse et modélisation."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#ce-quil-faut-faire",
    "href": "doc/cours/intro-python-slides.html#ce-quil-faut-faire",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Ce qu’il faut faire",
    "text": "Ce qu’il faut faire\n\nLisez attentivement les consignes de chaque TP.\nEssayez de résoudre les exercices par vous-même.\nRecherchez dans les cours et tutoriels en ligne.\nTravaillez en binôme pour échanger des idées.\nPosez des questions à l’enseignante en cas de blocage."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#à-ne-pas-faire",
    "href": "doc/cours/intro-python-slides.html#à-ne-pas-faire",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "À ne pas faire",
    "text": "À ne pas faire\n\nUtiliser ChatGPT sans comprendre la solution.\nCopier/coller des réponses sans vérifier leur validité.\nNe pas documenter votre code ou vos démarches.\n\n\nNote : Ces pratiques nuisent à l’apprentissage et à la compréhension."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#évaluation",
    "href": "doc/cours/intro-python-slides.html#évaluation",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Évaluation",
    "text": "Évaluation\n\nPartie 1 : Projet à faire à la maison.\n\nSujet distribué une semaine avant la date de l’examen.\nAnalyse et exploration d’un dataset fourni.\nÀ rendre sous forme d’un notebook bien structuré :\n\nExplication des étapes de nettoyage.\nVisualisation des données et interprétation.\nConclusions et recommandations.\n\n\nPartie 2 : QCM.\n\nDurée : 2h.\nQuestions portant sur les concepts abordés pendant le cours et les TP.\nLa date sera définie à l’avance."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#bibliographie",
    "href": "doc/cours/intro-python-slides.html#bibliographie",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nDocumentation officielle Python\nPython for Everybody\nGoogle Colab\nPython Crash Course (Livre)\nSite\nSite officiel Python\nTutoriel de la documentation officielle en ligne\nMémento Bases Python 3 de Laurent POINTAL, 2012-2013\nAbrégé Dense Python 3.2 de Laurent POINTAL, 2012\nA Quick, Painless Tutorial on the Python Language de Norman Matloff, 2008 (PDF)\nTutoriels Python en ligne\nDernière version de Python et interface IDLE\nOutil IEP (Interactive Editor for Python)\nThink Python - How to Think Like a Computer Scientist d’Allen B. Downey, 2014\nApprendre à programmer avec Python de Gérard Swinnen, 2009\nUne introduction à Python 3 de Robert CORDEAU et Laurent POINTAL, 2010\nCours Python de l’École Polytechnique Universitaire UMPC\nDocumentation sur l’intégration C/C++/Python\nPython Development with PyDev and Eclipse - Tutorial de Lars Vogel, 2011\nApprenez à programmer en Python - Site du Zéro - Vincent Le Goff, 2011\nAssociation francophone Python"
  },
  {
    "objectID": "doc/cours/typedonnees.html",
    "href": "doc/cours/typedonnees.html",
    "title": "Les Types de données en Python",
    "section": "",
    "text": "Python propose des types de données avancés pour manipuler des collections de données ou des structures complexes. Ces types sont essentiels pour gérer des informations organisées."
  },
  {
    "objectID": "doc/cours/typedonnees.html#les-listes-list",
    "href": "doc/cours/typedonnees.html#les-listes-list",
    "title": "Les Types de données en Python",
    "section": "1 1. Les Listes (list)",
    "text": "1 1. Les Listes (list)\nLes listes sont des collections ordonnées et modifiables. Elles peuvent contenir des éléments de types différents.\nCaractéristiques : - Ordonnées : Les éléments conservent leur ordre. - Modifiables : Vous pouvez ajouter, supprimer ou modifier des éléments. - Peuvent contenir des doublons.\nExemple :\nfruits = [\"pomme\", \"banane\", \"cerise\"]\nnombres = [1, 2, 3, 4]\nfruits.append(\"orange\")  # Ajoute un élément\nprint(fruits)"
  },
  {
    "objectID": "doc/cours/typedonnees-slides.html#les-listes-list",
    "href": "doc/cours/typedonnees-slides.html#les-listes-list",
    "title": "Les Types de données en Python",
    "section": "1. Les Listes (list)",
    "text": "1. Les Listes (list)\nLes listes sont des collections ordonnées et modifiables. Elles peuvent contenir des éléments de types différents.\nCaractéristiques : - Ordonnées : Les éléments conservent leur ordre. - Modifiables : Vous pouvez ajouter, supprimer ou modifier des éléments. - Peuvent contenir des doublons.\nExemple :\nfruits = [\"pomme\", \"banane\", \"cerise\"]\nnombres = [1, 2, 3, 4]\nfruits.append(\"orange\")  # Ajoute un élément\nprint(fruits)"
  },
  {
    "objectID": "doc/tp/tp1.html",
    "href": "doc/tp/tp1.html",
    "title": "Premières requêtes SQL",
    "section": "",
    "text": "Vous allez réaliser ce TP su un Datalab.\n\n\n\n\n\n\nLe Datalab en quelques mots\n\n\n\nUn TP dédié vous expliquera plus en détail ce qu’est le Datalab.\nLe Datalab permet aux utilisateurs de lancer facilement des services pour travailler avec des langages comme R ou Python, ou encore gérer des bases de données.\nIl offre une grande puissance de calcul, ce qui permet de traiter de gros volumes de données et de réaliser des analyses complexes sans se soucier des limites techniques.\nAvec cette plateforme :\n\nles utilisateurs accèdent aux ressources nécessaires en quelques clics\nsans devoir installer eux-mêmes les logiciels\nni configurer les serveurs\n\n\n\n\n\nConnectez-vous à l’une des 2 instances suivantes (elles sont quasiment identiques) :\n\nDatalab du GENES\nDatalab SSPCloud de l’INSEE\n\nen créant un compte avec votre mail ENSAI\n\n\n\n\n\n\n\n\nTip\n\n\n\nPour éviter les problèmes de charges :\n\nLes élèves fonctionnaires feront le TP sur le SSPCloud\nLes élèves ingénieurs ➡️ Datalab du GENES\n\n\n\n\n\n\n\n\n\n\n\n\nEn cas d’indisponibilité des Datalabs\n\n\n\nUniquement en cas d’indisponibilité des Datalabs, vous pouvez réaliser le TP directement sur la VM. Le logiciel DBeaver est installé.\n\n\n\nLancez DBeaver\nOnglet Base de données ➡️ Nouvelle Connexion\n\nType de connexion : DuckDB\nSuivant\nPath : :memory:\nTerminer\n\nDans l’explorer (à gauche), clic droit sur la connexion que vous venez de créer\n\nEditeur SQL ➡️ Script SQL (raccourci : F3)\n\n\nCela ouvre une fenêtre dans laquelle vous pouvez saisir du SQL."
  },
  {
    "objectID": "doc/tp/tp1.html#introduction",
    "href": "doc/tp/tp1.html#introduction",
    "title": "Premières requêtes SQL",
    "section": "",
    "text": "Vous allez réaliser ce TP su un Datalab.\n\n\n\n\n\n\nLe Datalab en quelques mots\n\n\n\nUn TP dédié vous expliquera plus en détail ce qu’est le Datalab.\nLe Datalab permet aux utilisateurs de lancer facilement des services pour travailler avec des langages comme R ou Python, ou encore gérer des bases de données.\nIl offre une grande puissance de calcul, ce qui permet de traiter de gros volumes de données et de réaliser des analyses complexes sans se soucier des limites techniques.\nAvec cette plateforme :\n\nles utilisateurs accèdent aux ressources nécessaires en quelques clics\nsans devoir installer eux-mêmes les logiciels\nni configurer les serveurs\n\n\n\n\n\nConnectez-vous à l’une des 2 instances suivantes (elles sont quasiment identiques) :\n\nDatalab du GENES\nDatalab SSPCloud de l’INSEE\n\nen créant un compte avec votre mail ENSAI\n\n\n\n\n\n\n\n\nTip\n\n\n\nPour éviter les problèmes de charges :\n\nLes élèves fonctionnaires feront le TP sur le SSPCloud\nLes élèves ingénieurs ➡️ Datalab du GENES\n\n\n\n\n\n\n\n\n\n\n\n\nEn cas d’indisponibilité des Datalabs\n\n\n\nUniquement en cas d’indisponibilité des Datalabs, vous pouvez réaliser le TP directement sur la VM. Le logiciel DBeaver est installé.\n\n\n\nLancez DBeaver\nOnglet Base de données ➡️ Nouvelle Connexion\n\nType de connexion : DuckDB\nSuivant\nPath : :memory:\nTerminer\n\nDans l’explorer (à gauche), clic droit sur la connexion que vous venez de créer\n\nEditeur SQL ➡️ Script SQL (raccourci : F3)\n\n\nCela ouvre une fenêtre dans laquelle vous pouvez saisir du SQL."
  },
  {
    "objectID": "doc/tp/tp1.html#lancement-du-service",
    "href": "doc/tp/tp1.html#lancement-du-service",
    "title": "Premières requêtes SQL",
    "section": "1 Lancement du service",
    "text": "1 Lancement du service\n\n\n\n\n\n\nNote\n\n\n\nUniquement sur le Datalab.\n\n\n\nLancez le service CloudBeaver\n\nAllez dans Catalogue de services\nOnglet Databases\n\n\n\n\n\n\n\n\nCloudBeaver\n\n\n\nCloudBeaver est une application web légère dédiée à la gestion de bases de données. Elle permet de se connecter à divers types de bases de données, qu’elles soient SQL, NoSQL ou hébergées dans le cloud, à partir d’un seul point d’accès via un navigateur. CloudBeaver facilite l’exploration, la modification et la visualisation des données sans nécessiter l’installation de logiciels locaux.\nElle offre également des fonctionnalités de sécurité pour protéger l’accès aux données. Son interface conviviale en fait un outil accessible aussi bien aux développeurs qu’aux analystes de données.\n\n\nPour ce premier TP, nous n’allons pas utiliser de base de données PostgreSQL. Nous allons simplement utiliser DuckDB pour lire des fichiers de données.\n\n\n\n\n\n\nDuckDB\n\n\n\nDuckDB est un moteur de base de données relationnelle conçu pour des analyses rapides et efficaces.\nDuckDB est idéal pour les charges de travail analytiques en raison de sa simplicité, de sa rapidité et de son extensibilité, surtout pour traiter des fichiers volumineux localement.\n\n\n\n\n\n\n\nCaractéristique\nDescription\n\n\n\n\nSimplicité\nFonctionne sans serveur, intégré dans le processus hôte. Aucune dépendance externe pour la compilation ou l’exécution, simplifiant son déploiement.\n\n\nRapidité\nOptimisé pour l’analytique (OLAP) avec un moteur d’exécution vectorisé en colonnes, réduisant le temps de traitement pour les requêtes complexes.\n\n\nRichesse fonctionnelle\nSupporte des requêtes SQL complexes, fonctions de fenêtre, index secondaires, et assure des garanties ACID grâce au contrôle de concurrence (MVCC).\n\n\nExtensibilité\nPermet l’ajout de types de données, fonctions et formats de fichiers via des extensions (supporte Parquet, JSON, S3, HTTP(S)).\n\n\nGratuit et open-source\nLicence MIT, code source disponible et contributions ouvertes à tous.\n\n\n\n\n\n\nCréez une nouvelle connexion DuckDB\n\nEn haut à gauche, cliquez sur le +, puis New connection\nSélectionner DuckDB\nCliquez sur le bouton CREATE\n\nOuvrez un éditeur SQL\n\nDans l’explorer à gauche, clic droit sur votre connection DuckDB ➡️ SQL Editor\nvous pouvez maintenant saisir du code SQL"
  },
  {
    "objectID": "doc/tp/tp1.html#les-prénoms",
    "href": "doc/tp/tp1.html#les-prénoms",
    "title": "Premières requêtes SQL",
    "section": "2 Les prénoms",
    "text": "2 Les prénoms\nLe fichier des prénoms contient des données sur les prénoms attribués aux enfants nés en France depuis 1900. Ces données sont disponibles au niveau France et par département.\nDans ce TP, nous allons utiliser la version au format parquet, mise à disposition sur le site data.gouv par Icem7.\n\n\n\n\n\n\nFichier parquet\n\n\n\nLe format Parquet est un format de fichier de stockage de données optimisé pour les systèmes de traitement analytique de grande échelle. Voici ses principales caractéristiques :\n\nStockage en colonnes : Parquet stocke les données par colonnes plutôt que par lignes, ce qui améliore l’efficacité de l’accès aux données dans les charges de travail analytiques.\nCompression efficace : La compression par colonne permet un taux de compression moyen de 5 à 10 fois par rapport aux formats CSV, voire plus pour de gros fichiers. Cela réduit significativement la taille des données stockées et le coût de stockage.\nOptimisé pour l’analytique : Parquet est conçu pour les requêtes en lecture intensive, car il permet de charger uniquement les colonnes nécessaires pour une analyse, ce qui améliore les performances en particulier sur les données volumineuses.\nMétadonnées Riches et Auto-descriptives : Parquet inclut des métadonnées détaillées (schéma, types de données, statistiques min/max), permettant une lecture rapide et sans risque d’erreur. Ces métadonnées facilitent également le traitement des données par différents outils.\nLangage Indépendant et Open Source : Le format Parquet est indépendant du langage et peut être utilisé avec divers langages de programmation (Python, R, C++, Java). Il est aussi open source et compatible avec la plupart des frameworks de big data.\n\n\n\nPour en savoir plus sur le format Parquet :\n\nParquet, qu’est-ce que c’est ?, Databricks\nWhat is the Parquet File Format?, Upsolver blog\n\n\n\nCréez une vue prenom qui pointera vers le fichier parquet des prénoms\nCREATE OR REPLACE VIEW prenom AS\nFROM 'https://static.data.gouv.fr/resources/base-prenoms-insee-format-parquet/20231121-161435/prenoms-nat2022.parquet'\n\nVous pourrez ensuite requêter sur cette vue comme si c’était une table\n\n\n\n\n\n\n\n\nÉxécuter une requête\n\n\n\nCliquez sur la requête pour y positionner le pointeur de la souris, puis au choix :\n\nCliquez sur le petit triangle orange\nCTRL + ENTREE\n\n\n\n\n2.1 Premières requêtes\n\n\n\n\n\n\nImportant\n\n\n\nPrenez le temps et l’habitude d’écrire de jolies requêtes bien alignées !!!\n\n\nbien.sql\n\nSELECT c.nom AS club, \n       AVG(j.elo) AS moyenne_elo\n  FROM joueuse j \n INNER JOIN club c USING (id_club) \n WHERE j.mail IS NOT NULL \n GROUP BY c.nom \n ORDER BY 2 DESC;\n\n\n\n\npasbien.sql\n\nSELECT c.nom AS club, AVG(j.elo) AS moyenne_elo FROM joueuse j INNER JOIN club c USING (id_club) WHERE mail IS NOT NULL GROUP BY c.nom ORDER BY 2 DESC;\n\n\n\n\nListez tous les éléments de prenom\nFiltrez pour ne plus afficher les prénoms rares\n\n\n\n\n\n\n\nSecret statistique\n\n\n\nLes prénoms ayant un nombre insuffisant d’occurrences sont regroupés sous une appellation générique. Cela permet de protéger le secret statistique et de garantir l’anonymat.\nSans cette précaution, par exemple :\n\nsi vous vous appeliez Yann-Adam LEFGRIGO\net que vous êtes le seul à porter ce prénom\nn’importe qui pourrait connaître votre année de naissance\n\nDe même, si vous êtiez 2 à porter ce prénom, l’autre Yann-Adam connaitrait aussi votre année de naissance. Ce n’est toujours pas satisfaisant. Il faut donc à minima 3 individus pour garantir l’anonymat.\n\n\n\nDe quel type est le champ annais ? Pourquoi ?\nListez les différentes années de naissance\n\nClassez-ces années en décroissant\nQue remarquez-vous ?\n\nAjoutez un filtre pour exclure l’année non renseignée\n\n\n\n2.2 Année 2022\n\n\n\n\n\n\nFiltrez sur l’année 2022 et excluez les prénoms rares.\n\n\n\n\nListez les prénoms de l’année 2022\n\nClassez-les en décroissant par le nombre de fois où ils sont été donnés\n\nListez les prénoms de l’année 2022 donnés plus de 2000 fois\nClassez-les d’abord par sexe, puis par nombre décroissant d’occurrences\n\nQuels sont les prénoms masculins et féminins les plus donnés ?\n\nListez les prénoms féminins commençant par la lettre Q\nCompter le nombre de prénoms commençant par chaque lettre\n\nPour extraite la première lettre d’un prénom, vous pouvez par exemple utiliser la fonction SUBSTRING\nBonus : différenciez filles et garçons\n\n\n\n\n2.3 Statistiques descriptives\n\nLancez la commande SUMMARIZE prenom; pour avoir quelques stats sur la table\n\n\n\n\n\n\n\nFiltrez pour exclure les prénoms rares.\n\n\n\n\nAffichez pour l’année 2003, les prénoms et leurs nombres de caractères\n\nTrouvez une fonction adéquate\n\nAffichez le nombres de caractères minimum, maximum et moyen parmi les prénoms de 2003\nListez les 3 prénoms de 2003 ayant le nombre de caractères maximum\nModifiez cette dernière requête pour afficher pour chaque année entre 2015 et 2022 le ou les prénoms avec le plus de caractères\n\nclassez par année\nDifficulty : ⭐ ⭐ ⭐\n\nAffichez pour chaque année la taille moyenne des prénoms\n\nclassez par année\nutilisez la fonction ROUND(&lt;value&gt;, 2) pour arrondir les moyennes\nQue remarquez-vous ?\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nDans cette partie vous allez avoir besoin d’utiliser des sous-requêtes\n\n\n\n\n\n2.4 Jérôme, c’est moi\n\nListez les différentes années où le prénom JÉRÔME a été donné\n\nclassez par année décroissante\nQue remarquez-vous ?\n\nListez également les JEROME avec d’autres accents / sans accent\n\nrecherchez une fonction DuckDB qui permet de répondre à ce besoin\n\nAffichez pour chaque année le nombre de fois où le prénom JEROME a été donné, quelle que soit l’accentuation\n\n\n\n\n\n\n\nAide\n\n\n\n\n\n\nvoir Fontion DuckDB strip_accents()\nRegroupez par strip_accents(preusuel) et annais\nAffichez strip_accents(preusuel), annais et la somme de la colonne nombre\n\n\n\n\n\n\n2.5 Suivi temporel\n\n\n\n\n\n\nFiltrez pour exclure l’année XXXX.\n\n\n\n\nCréez une requête qui permet d’avoir le nombre de naissances par année depuis l’année 2000\n\nClassez par année décroissante\n\nComplétez la requête pour afficher le nombre de prénoms différents données chaque année\n\nRemarque : vous n’aurez pas le nombre exact car certains sont dans les prénoms rares\n\nÉcrivez une requête qui donne le nombre de filles et de garçons nés chaque année depuis 2000\n\n\n\n\n\n\n\nNote\n\n\n\nMême si le champ annais n’est pas de type numérique, il est possible de comparer des chaines de caractères.\nLe code ASCII est utilisé pour comparer le premier caractère de la chaine, puis en cas d’égalité, le 2e caractère…\n\n\n\n\n2.6 Prénoms composés\nNous allons maintenant nous interesser aux prénoms composés entre 2000 et 2009\n\nListez les prénoms composés entre les années 2000 et 2009 incluses\nRegroupez-les par preusuel, puis affichez également le nombre de fois où ils ont été donnés\n\nTriez en décroissant par ce nombre\n\nFiltrez pour ne garder que les prénoms composés contenant le prénom JEAN\n\nQue remarquez-vous ? N’y a-t-il pas des intrus ?\n\nTrouvez une solution pour remédier à ce souci\n\nPar exemple avec la fonction DuckDB split_part()\n\n\n\n\n2.7 Cette année-là\n\n\n\n\n\n\nDifficulty : ⭐ ⭐ ⭐\nFiltrez sur l’année 1962 et excluez les prénoms rares.\n\n\n\n\nComptez le nombre de prénoms distincts donnés\nComplétez en comptant le nombre de prénoms distincts donnés par sexe\nComplétez en calculant le nombre total des prénoms distincts donnés, en prenant en compte la distinction entre les sexes\n\nexemple : ici Dominique (H) et Dominique (F) comptent pour 2 prénoms\n\nDonnez la liste des prénoms donnés à la fois à des filles et des garçons\n\naffichez le nombre de fois où ils ont été donnés à chaque sexe\n\nAjoutez à la dernière requête une colonne contenant un booléen qui affiche\n\nTrue si le prénom a été donné à plus de filles que de garçons\nFalse sinon\n\nAu lieu d’afficher ce booléen, ajoutez une condition pour n’afficher que lorsque le prénom a été plus donné à des filles"
  },
  {
    "objectID": "doc/tp/tp1.html#fichier-des-individus",
    "href": "doc/tp/tp1.html#fichier-des-individus",
    "title": "Premières requêtes SQL",
    "section": "3 Fichier des individus",
    "text": "3 Fichier des individus\n\nCréez une vue qui pointe vers le fichier des individus du recensement de la population 2020\nCREATE OR REPLACE VIEW individus AS\nFROM 'https://static.data.gouv.fr/resources/recensement-de-la-population-fichiers-detail-individus-localises-au-canton-ou-ville-2020-1/20231023-122841/fd-indcvi-2020.parquet';\nComptez le nombre d’individus\n\nPourquoi ce nombre d’individus vivant en France paraît faible ?\n\n\n\n\n\n\n\n\nPoids de l’individu\n\n\n\nDans de nombreuses bases de données de l’INSEE, la variable ipondi représente le poids de l’individu.\ni.e. Si une ligne a un IPONDI égal à 2, cela signifie qu’elle représente 2 individus.\n\n\n\nAu lieu de compter le nombre de lignes, sommez la variable ipondi\n\nVous pouvez suffixer votre somme par ::INT pour convertir ce nombre en entier\n\nAffichez 10 lignes\n\nQue remarquez-vous ?\n\n\n\n\n\n\n\n\nCodification\n\n\n\nPourquoi utiliser une codification pour le fichier national individus localisés au canton-ou-ville du recensement de la population 2020 ?\n\nEspace de stockage réduit : Les codes courts remplacent des chaînes de texte plus longues, ce qui diminue la taille du fichier et rend le stockage et le transfert de données plus efficaces. Même après codification, le fichier pèse plus de 500 Mo\nStandardisation et uniformité : Utiliser des codes standardisés permet de garantir une structure homogène et facilite l’intégration et la comparaison des données entre différents fichiers ou études.\nPerformances de traitement : Les codes sont plus rapides à traiter que des textes longs, notamment pour des opérations de recherche, de tri, et de filtrage, ce qui est crucial pour les grands ensembles de données.\n\n\n\n\nPour s’y retrouver, créez une vue vers le dictionnaire des variables\nCREATE OR REPLACE VIEW variables_individus AS\nFROM 'https://static.data.gouv.fr/resources/recensement-de-la-population-fichiers-detail-individus-localises-au-canton-ou-ville-2020-1/20231025-082910/dictionnaire-variables-indcvi-2020.csv'\nAffichez tout le contenu de cette vue\nTrouvez la modalité représentant le département de résidence de l’individu\nAffichez le nombre d’habitants par départements\n\nordonnez par numéro de département\n\nComplétez la requête en :\n\nrestreignant sur les individus entre 25 et 29 ans\ndifférenciant les hommes et les femmes"
  },
  {
    "objectID": "doc/tp/tp1.html#arrêtez-votre-service",
    "href": "doc/tp/tp1.html#arrêtez-votre-service",
    "title": "Premières requêtes SQL",
    "section": "Arrêtez votre service",
    "text": "Arrêtez votre service\nC’est la fin du TP, vous pouvez maintenant sauvegarder votre travail et libérer les ressources réservées :\n\nCopiez votre code et collez le sur votre machine dans un fichier .sql\n\npar exemple dans P:/Cours1A/UE3-Bases-de-donnees-relationnelles/TP1/tp1.sql\n\nRetournez sur la page d’accueil du Datalab\nAllez dans Mes Services et supprimez votre service"
  },
  {
    "objectID": "doc/tp/tp1.html#pour-aller-plus-loin",
    "href": "doc/tp/tp1.html#pour-aller-plus-loin",
    "title": "Premières requêtes SQL",
    "section": "Pour aller plus loin",
    "text": "Pour aller plus loin\n\n3 explorations bluffantes avec DuckDB"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programmation avec Python: Analyse de données et Data visualisation",
    "section": "",
    "text": "6 sessions de 3 heures (18 heures au total)"
  },
  {
    "objectID": "index.html#contenu-du-cours",
    "href": "index.html#contenu-du-cours",
    "title": "Programmation avec Python: Analyse de données et Data visualisation",
    "section": "Contenu du cours",
    "text": "Contenu du cours\n\nIntroduction à Python\n\nPrésentation et installation\nVariables, types de données, opérateurs\n\nStructures de contrôle\n\nConditions (if, elif, else)\nBoucles (for, while)\nGestion des erreurs (try, except)\n\nLes fonctions\n\nDéfinir et appeler des fonctions\nParamètres, valeurs de retour\n\nManipulation de données avec pandas\n\nChargement de fichiers CSV/Excel\nNettoyage des données (valeurs manquantes, transformations)\nSélection et filtrage des données\n\nVisualisation des données\n\nGraphiques avec Matplotlib\nVisualisation avancée avec Seaborn\n\nProgrammation orientée objet (POO)\n\nDéfinition de classes, objets, méthodes\n\nIntroduction au Machine Learning avec Python\n\nBibliothèques essentielles : scikit-learn\nPréparation des données pour le ML (normalisation, division en train/test)\nModèles supervisés : régression linéaire et classification (KNN)\nÉvaluation des modèles : métriques (MAE, R², précision, rappel)\nNotions de surapprentissage et régularisation\n\nProjet final\n\nNettoyage, exploration, visualisation et modélisation d’un dataset"
  },
  {
    "objectID": "index.html#correction-des-tp",
    "href": "index.html#correction-des-tp",
    "title": "Programmation avec Python: Analyse de données et Data visualisation",
    "section": "Correction des TP",
    "text": "Correction des TP\n\nSéance 1 : Introduction à Python\n\nTP1 :\n\nÉcrire un programme pour manipuler des types simples (nombres, chaînes).\nImplémenter un calcul d’aire et périmètre de figures géométriques.\nAjouter une fonction pour vérifier si un mot est un palindrome.\n\n\n\n\nSéance 2 : Structures de contrôle\n\nTP2 :\n\nCréer un programme pour afficher les nombres premiers dans une plage donnée.\nÉcrire des scripts utilisant des boucles imbriquées (tables de multiplication).\nAjouter la gestion d’erreurs pour une division par zéro.\n\n\n\n\nSéance 3 : Manipulation de données avec pandas\n\nTP3 :\n\nCharger un dataset CSV.\nNettoyer les données (valeurs manquantes, doublons).\nAppliquer des filtres conditionnels pour extraire des sous-ensembles.\nEffectuer des statistiques descriptives simples (mean, std, min, max).\n\n\n\n\nSéance 4 : Visualisation des données\n\nTP4 :\n\nCréer des histogrammes et des scatterplots avec Matplotlib.\nUtiliser Seaborn pour tracer des heatmaps et analyser des corrélations.\nPersonnaliser des graphiques (titres, étiquettes, couleurs).\n\n\n\n\nSéance 5 : Programmation orientée objet (POO)\n\nTP5 :\n\nImplémenter une classe pour gérer les données d’un étudiant (nom, notes, moyenne).\n\nAjouter des méthodes pour calculer la moyenne et vérifier la réussite.\n\nÉtendre la classe avec des attributs supplémentaires (matières optionnelles).\n\n\n\n\nSéance 6 : Machine Learning avec Python\n\nTP6 :\n\nCharger un dataset (pandas) et le préparer pour le Machine Learning (normalisation, séparation train/test).\n\nImplémenter un modèle de régression linéaire pour prédire une variable cible.\n\nUtiliser un modèle de classification (KNN) pour classer des données.\n\nÉvaluer les performances avec des métriques comme R², précision et rappel."
  },
  {
    "objectID": "doc/glossaire.html",
    "href": "doc/glossaire.html",
    "title": "Glossaire",
    "section": "",
    "text": "🚧"
  },
  {
    "objectID": "doc/glossaire.html#python",
    "href": "doc/glossaire.html#python",
    "title": "Glossaire",
    "section": "Python",
    "text": "Python\nUn langage de programmation interprété, polyvalent, et accessible, utilisé dans divers domaines comme la data science, l’intelligence artificielle, le développement web et l’automatisation.\n\nVariable\nUn espace mémoire réservé pour stocker une valeur.\nEn Python, les variables n’ont pas de type explicitement défini, mais leur contenu en a un (ex : int, str, float).\nSynonymes : Identifiant, Conteneur.\n\n\nType de données\nCatégorie de données que peut prendre une variable : - int : nombres entiers. - float : nombres décimaux. - str : chaînes de caractères. - bool : valeurs booléennes (True, False).\nSynonymes : Type, Classe."
  },
  {
    "objectID": "doc/glossaire.html#structures-de-contrôle",
    "href": "doc/glossaire.html#structures-de-contrôle",
    "title": "Glossaire",
    "section": "Structures de contrôle",
    "text": "Structures de contrôle\n\nCondition\nPermet d’exécuter un bloc de code en fonction d’une condition.\nSyntaxe en Python :\nif condition:\n    # Faire quelque chose\nelif autre_condition:\n    # Faire autre chose\nelse:\n    # Faire par défaut"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#introduction",
    "href": "doc/cours/introduction-slides.html#introduction",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Introduction",
    "text": "Introduction\nPython est un langage de programmation polyvalent, apprécié pour sa simplicité et sa lisibilité. Il est utilisé dans des domaines variés comme le développement web, la data science, et l’intelligence artificielle."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#premiers-pas-avec-python",
    "href": "doc/cours/introduction-slides.html#premiers-pas-avec-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Premiers pas avec Python",
    "text": "Premiers pas avec Python\nPython est un langage polyvalent, lisible et largement utilisé. Cette section vous guide à travers les bases essentielles pour bien commencer avec Python."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#quest-ce-quune-variable",
    "href": "doc/cours/introduction-slides.html#quest-ce-quune-variable",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Qu’est-ce qu’une variable ?",
    "text": "Qu’est-ce qu’une variable ?\nUne variable est un conteneur permettant de stocker une valeur ou des données. En Python, une variable peut contenir différents types de données comme des nombres, du texte, ou des structures complexes."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#déclaration-dune-variable",
    "href": "doc/cours/introduction-slides.html#déclaration-dune-variable",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Déclaration d’une variable",
    "text": "Déclaration d’une variable\nEn Python, il suffit d’utiliser un nom valide et de lui assigner une valeur avec le symbole =.\nExemple :\n# Déclaration de variables\nnom = \"Alice\"   # Chaîne de caractères\nage = 25        # Entier\npi = 3.14       # Nombre flottant\nest_actif = True  # Booléen"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#les-types-de-base-en-python",
    "href": "doc/cours/introduction-slides.html#les-types-de-base-en-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Les Types de Base en Python",
    "text": "Les Types de Base en Python\nPython propose plusieurs types de données de base, essentiels pour la manipulation des informations.\n\n\n\n\n\n\n### Comment connaître le type d’une variable en Python ?\n\n\nPython propose une fonction intégrée appelée type() pour déterminer le type de données d’une variable."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#la-fonction-print",
    "href": "doc/cours/introduction-slides.html#la-fonction-print",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "La fonction print()",
    "text": "La fonction print()\nprint() est utilisée pour afficher des informations dans la console. Elle permet de montrer le contenu de variables, des messages, ou des résultats de calcul.\nExemple :\nprint(valeur)"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#afficher-plusieurs-éléments",
    "href": "doc/cours/introduction-slides.html#afficher-plusieurs-éléments",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Afficher plusieurs éléments",
    "text": "Afficher plusieurs éléments\nVous pouvez afficher plusieurs éléments en même temps en les séparant par des virgules. Python ajoute automatiquement un espace entre ces éléments.\nExemple :\nprint(\"Bonjour\", \"Python\", 3.10)"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#formatage-des-chaînes",
    "href": "doc/cours/introduction-slides.html#formatage-des-chaînes",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Formatage des chaînes",
    "text": "Formatage des chaînes\nPour des affichages dynamiques et lisibles, plusieurs méthodes de formatage sont disponibles :\n\nConcaténation avec + : Combine des chaînes de caractères.\n\nnom = \"Alice\"\nprint(\"Bonjour, \" + nom)\n\nSubstitution avec f-strings : Insère directement des variables dans une chaîne avec une syntaxe claire.\n\nnom = \"Alice\"\nage = 25\nprint(f\"Bonjour, je m'appelle {nom} et j'ai {age} ans.\")\n\nMéthode format() : Insère des variables dans une chaîne avec des positions spécifiques.\n\nnom = \"Alice\"\nage = 25\nprint(\"Bonjour, je m'appelle {} et j'ai {} ans.\".format(nom, age))"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#caractères-spéciaux",
    "href": "doc/cours/introduction-slides.html#caractères-spéciaux",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Caractères spéciaux",
    "text": "Caractères spéciaux\nCertaines séquences spéciales permettent de modifier l’affichage : - \\\\n : Effectue un saut de ligne. - \\\\t : Ajoute une tabulation.\nCes caractères sont utiles pour structurer l’affichage dans la console.\nprint(\"Bonjour\\\\nPython\")\nprint(\"Nom:\\\\tAlice\")"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#contrôler-la-fin-de-laffichage",
    "href": "doc/cours/introduction-slides.html#contrôler-la-fin-de-laffichage",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Contrôler la fin de l’affichage",
    "text": "Contrôler la fin de l’affichage\nPar défaut, chaque appel à print() termine par un saut de ligne. Il est possible de modifier ce comportement pour afficher plusieurs éléments sur la même ligne.\nprint(\"Bonjour\", end=\" \")\nprint(\"Python !\")"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#résumé",
    "href": "doc/cours/introduction-slides.html#résumé",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Résumé",
    "text": "Résumé\n\n\n\n\n\n\n\nMéthode\nDescription\n\n\n\n\nprint()\nAffiche des données dans la console.\n\n\nConcaténation\nCombine plusieurs chaînes de caractères.\n\n\nf-strings\nInsère des variables directement dans une chaîne.\n\n\n.format()\nFormate une chaîne avec des variables.\n\n\nCaractères spéciaux\nModifie l’apparence (nouvelle ligne, tabulation)."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#les-structures-conditionnelles",
    "href": "doc/cours/introduction-slides.html#les-structures-conditionnelles",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Les Structures conditionnelles",
    "text": "Les Structures conditionnelles\nLes structures conditionnelles permettent d’exécuter des blocs de code uniquement si une condition est remplie."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#les-boucles-en-python",
    "href": "doc/cours/introduction-slides.html#les-boucles-en-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Les Boucles en Python",
    "text": "Les Boucles en Python\nLes boucles permettent de répéter des actions tant qu’une condition est vraie ou pour un nombre fixe d’itérations."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#résumé-1",
    "href": "doc/cours/introduction-slides.html#résumé-1",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Résumé",
    "text": "Résumé\n\n\n\n\n\n\n\nStructure\nDescription\n\n\n\n\nif\nExécute un bloc si une condition est vraie.\n\n\nelif\nAjoute des conditions supplémentaires.\n\n\nelse\nDéfinit un bloc exécuté si toutes les conditions sont fausses.\n\n\nfor\nParcourt une séquence ou un intervalle.\n\n\nwhile\nRépète un bloc tant qu’une condition est vraie.\n\n\nbreak\nInterrompt une boucle.\n\n\ncontinue\nSaute à l’itération suivante.\n\n\npass\nNe fait rien (utile pour des blocs vides).\n\n\n\nAvec ces structures, vous pouvez écrire des programmes dynamiques et efficaces en Python !"
  },
  {
    "objectID": "doc/cours/introduction.html",
    "href": "doc/cours/introduction.html",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "",
    "text": "Python est un langage de programmation polyvalent, apprécié pour sa simplicité et sa lisibilité. Il est utilisé dans des domaines variés comme le développement web, la data science, et l’intelligence artificielle.\n\n\n\n\nPython est un langage interprété, open source, et multiplateforme.\nCréé par Guido van Rossum en 1989 (première version en 1991).\nPoints forts :\n\nSyntaxe simple et lisible.\nLarge écosystème de bibliothèques.\n\n\n\n\n\n\n\nPratique régulière : Codez régulièrement pour solidifier vos bases.\nExplorez des projets simples : Calculatrice, jeu de devinettes, gestion d’inventaire.\nUtilisez les ressources disponibles :\n\nDocumentation officielle : python.org/doc.\nPlateformes d’exercices : LeetCode, Hackerrank.\n\n\n\n\n\n\n\n\n\nTéléchargez Python depuis python.org.\n\n\n\n\n\n\n\n\nQu’est-ce que VS Code ?\n\nUn éditeur de code léger, puissant et extensible, développé par Microsoft.\n\nIdéal pour écrire et exécuter des scripts Python grâce à ses extensions.\n\nInstaller VS Code :\n\nTéléchargez-le sur code.visualstudio.com.\n\nInstallez l’extension Python via le Visual Studio Code Marketplace :\n\nOuvrez VS Code.\nAllez dans l’onglet des extensions (icône avec des blocs).\nRecherchez Python et cliquez sur “Installer”.\n\n\n\n\n\n\n\n\nQu’est-ce qu’Anaconda ?\n\nUne distribution Python incluant Jupyter Notebook, des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.) et un gestionnaire d’environnements.\n\nIdéal pour la data science et le machine learning.\n\nInstaller Anaconda :\n\nTéléchargez-le depuis anaconda.com.\n\nSuivez les instructions pour votre système d’exploitation (Windows, macOS, Linux).\n\nAvantages :\n\nConfiguration simplifiée pour débuter.\n\nGestion facile des environnements virtuels avec conda.\n\n\n\n\n\n\n\nQu’est-ce que Jupyter Notebook ?\n\nUn environnement interactif où vous pouvez écrire et exécuter du code Python dans des blocs (appelés “cellules”).\n\nIdéal pour la data science et les visualisations.\n\nInstaller Jupyter Notebook :\n\nSi vous avez Anaconda, Jupyter est préinstallé.\n\nSinon, installez-le avec pip :\npip install notebook\n\n\n\n\n\n\n\nQu’est-ce que Google Colab ?\n\nUn environnement en ligne gratuit pour coder en Python, développé par Google.\n\nAucun besoin d’installer Python ou Jupyter : tout fonctionne dans votre navigateur.\n\nAvantage : accès à des GPU gratuits pour le machine learning.\n\nAccéder à Google Colab :\n\nRendez-vous sur colab.research.google.com.\n\nConnectez-vous avec un compte Google.\n\nCréez un nouveau notebook en cliquant sur New Notebook.\n\nFonctionnalités clés :\n\nSauvegarde automatique sur Google Drive.\n\nSupport intégré des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.).\n\n\n\n\n\n\n\n\nPython est un langage polyvalent, lisible et largement utilisé. Cette section vous guide à travers les bases essentielles pour bien commencer avec Python.\n\n\nUne variable est un conteneur permettant de stocker des données. En Python, il suffit de nommer la variable et d’y attribuer une valeur :\nx = 5\ny = \"Python\"\nprint(x, y)\n\n\n\n\nDans un script Python, tout ce qui suit le caractère # est ignoré par l’interpréteur jusqu’à la fin de la ligne. Ces lignes sont appelées commentaires et sont destinées à expliquer le code dans un langage humain.\n\n\n\n\nClarifier le code : Expliquez des portions complexes pour vous ou d’autres développeurs.\nDocumenter le fonctionnement : Fournir des indications sur le rôle d’un morceau de code ou d’une fonction.\nFaciliter la maintenance : Les commentaires rendent votre code plus compréhensible à long terme.\n\nLes commentaires ne sont pas exécutés par Python et n’affectent donc pas les performances du programme.\n\nPour ajouter un commentaire, commencez la ligne avec un #. Python ignorera tout ce qui suit ce caractère jusqu’à la fin de la ligne.\nExemple simple :\n# Ceci est un commentaire simple\nprint(\"Hello world!\")  # Affiche un message à l'écran\n\n# Déclaration de variables\nnom = \"Alice\"  # Nom de l'utilisateur\nage = 25       # Âge de l'utilisateur\n\n# Affichage des informations\nprint(f\"Nom : {nom}\")\nprint(f\"Âge : {age}\")\n\n# Cette partie affiche une salutation\nprint(\"Bonjour et bienvenue dans le cours de Python !\")\n\n\n\n\nSoyez concis et clair Vos commentaires doivent aller à l’essentiel et être compréhensibles.\n\n# Calcule la somme des éléments de la liste\ntotal = sum([1, 2, 3, 4])\n\nÉvitez les commentaires inutiles\n\nNe commentez pas des choses évidentes que le code lui-même exprime clairement.\nExemple inutile :\n# Attribue la valeur 5 à la variable x\nx = 5\n\nMettez à jour vos commentaires\n\nAssurez-vous que vos commentaires reflètent toujours le fonctionnement réel du code, surtout après des modifications.\n\n\n\n\nCommentaires sur une ligne\n\nIls s’écrivent avec # au début de la ligne.\n# Ce programme affiche un message\nprint(\"Bienvenue en Python !\")\n\nCommentaires multilignes\n\nPour commenter plusieurs lignes, vous pouvez utiliser # au début de chaque ligne ou une chaîne de caractères triple (\"\"\" ou ''') si le commentaire est temporaire.\n# Début du programme\n# Ce script montre un exemple\n# avec des commentaires multilignes.\nOu avec une chaîne triple :\n\"\"\"\nCe script illustre :\n- L'utilisation de variables\n- L'utilisation des commentaires\n\"\"\""
  },
  {
    "objectID": "doc/cours/introduction.html#introduction",
    "href": "doc/cours/introduction.html#introduction",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "",
    "text": "Python est un langage de programmation polyvalent, apprécié pour sa simplicité et sa lisibilité. Il est utilisé dans des domaines variés comme le développement web, la data science, et l’intelligence artificielle.\n\n\n\n\nPython est un langage interprété, open source, et multiplateforme.\nCréé par Guido van Rossum en 1989 (première version en 1991).\nPoints forts :\n\nSyntaxe simple et lisible.\nLarge écosystème de bibliothèques.\n\n\n\n\n\n\n\nPratique régulière : Codez régulièrement pour solidifier vos bases.\nExplorez des projets simples : Calculatrice, jeu de devinettes, gestion d’inventaire.\nUtilisez les ressources disponibles :\n\nDocumentation officielle : python.org/doc.\nPlateformes d’exercices : LeetCode, Hackerrank.\n\n\n\n\n\n\n\n\n\nTéléchargez Python depuis python.org.\n\n\n\n\n\n\n\n\nQu’est-ce que VS Code ?\n\nUn éditeur de code léger, puissant et extensible, développé par Microsoft.\n\nIdéal pour écrire et exécuter des scripts Python grâce à ses extensions.\n\nInstaller VS Code :\n\nTéléchargez-le sur code.visualstudio.com.\n\nInstallez l’extension Python via le Visual Studio Code Marketplace :\n\nOuvrez VS Code.\nAllez dans l’onglet des extensions (icône avec des blocs).\nRecherchez Python et cliquez sur “Installer”.\n\n\n\n\n\n\n\n\nQu’est-ce qu’Anaconda ?\n\nUne distribution Python incluant Jupyter Notebook, des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.) et un gestionnaire d’environnements.\n\nIdéal pour la data science et le machine learning.\n\nInstaller Anaconda :\n\nTéléchargez-le depuis anaconda.com.\n\nSuivez les instructions pour votre système d’exploitation (Windows, macOS, Linux).\n\nAvantages :\n\nConfiguration simplifiée pour débuter.\n\nGestion facile des environnements virtuels avec conda.\n\n\n\n\n\n\n\nQu’est-ce que Jupyter Notebook ?\n\nUn environnement interactif où vous pouvez écrire et exécuter du code Python dans des blocs (appelés “cellules”).\n\nIdéal pour la data science et les visualisations.\n\nInstaller Jupyter Notebook :\n\nSi vous avez Anaconda, Jupyter est préinstallé.\n\nSinon, installez-le avec pip :\npip install notebook\n\n\n\n\n\n\n\nQu’est-ce que Google Colab ?\n\nUn environnement en ligne gratuit pour coder en Python, développé par Google.\n\nAucun besoin d’installer Python ou Jupyter : tout fonctionne dans votre navigateur.\n\nAvantage : accès à des GPU gratuits pour le machine learning.\n\nAccéder à Google Colab :\n\nRendez-vous sur colab.research.google.com.\n\nConnectez-vous avec un compte Google.\n\nCréez un nouveau notebook en cliquant sur New Notebook.\n\nFonctionnalités clés :\n\nSauvegarde automatique sur Google Drive.\n\nSupport intégré des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.)."
  },
  {
    "objectID": "doc/cours/introduction.html#premiers-pas-avec-python",
    "href": "doc/cours/introduction.html#premiers-pas-avec-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "",
    "text": "Python est un langage polyvalent, lisible et largement utilisé. Cette section vous guide à travers les bases essentielles pour bien commencer avec Python.\n\n\nUne variable est un conteneur permettant de stocker des données. En Python, il suffit de nommer la variable et d’y attribuer une valeur :\nx = 5\ny = \"Python\"\nprint(x, y)\n\n\n\n\nDans un script Python, tout ce qui suit le caractère # est ignoré par l’interpréteur jusqu’à la fin de la ligne. Ces lignes sont appelées commentaires et sont destinées à expliquer le code dans un langage humain.\n\n\n\n\nClarifier le code : Expliquez des portions complexes pour vous ou d’autres développeurs.\nDocumenter le fonctionnement : Fournir des indications sur le rôle d’un morceau de code ou d’une fonction.\nFaciliter la maintenance : Les commentaires rendent votre code plus compréhensible à long terme.\n\nLes commentaires ne sont pas exécutés par Python et n’affectent donc pas les performances du programme.\n\nPour ajouter un commentaire, commencez la ligne avec un #. Python ignorera tout ce qui suit ce caractère jusqu’à la fin de la ligne.\nExemple simple :\n# Ceci est un commentaire simple\nprint(\"Hello world!\")  # Affiche un message à l'écran\n\n# Déclaration de variables\nnom = \"Alice\"  # Nom de l'utilisateur\nage = 25       # Âge de l'utilisateur\n\n# Affichage des informations\nprint(f\"Nom : {nom}\")\nprint(f\"Âge : {age}\")\n\n# Cette partie affiche une salutation\nprint(\"Bonjour et bienvenue dans le cours de Python !\")\n\n\n\n\nSoyez concis et clair Vos commentaires doivent aller à l’essentiel et être compréhensibles.\n\n# Calcule la somme des éléments de la liste\ntotal = sum([1, 2, 3, 4])\n\nÉvitez les commentaires inutiles\n\nNe commentez pas des choses évidentes que le code lui-même exprime clairement.\nExemple inutile :\n# Attribue la valeur 5 à la variable x\nx = 5\n\nMettez à jour vos commentaires\n\nAssurez-vous que vos commentaires reflètent toujours le fonctionnement réel du code, surtout après des modifications.\n\n\n\n\nCommentaires sur une ligne\n\nIls s’écrivent avec # au début de la ligne.\n# Ce programme affiche un message\nprint(\"Bienvenue en Python !\")\n\nCommentaires multilignes\n\nPour commenter plusieurs lignes, vous pouvez utiliser # au début de chaque ligne ou une chaîne de caractères triple (\"\"\" ou ''') si le commentaire est temporaire.\n# Début du programme\n# Ce script montre un exemple\n# avec des commentaires multilignes.\nOu avec une chaîne triple :\n\"\"\"\nCe script illustre :\n- L'utilisation de variables\n- L'utilisation des commentaires\n\"\"\""
  },
  {
    "objectID": "doc/cours/introduction.html#quest-ce-quune-variable",
    "href": "doc/cours/introduction.html#quest-ce-quune-variable",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "2.1 Qu’est-ce qu’une variable ?",
    "text": "2.1 Qu’est-ce qu’une variable ?\nUne variable est un conteneur permettant de stocker une valeur ou des données. En Python, une variable peut contenir différents types de données comme des nombres, du texte, ou des structures complexes."
  },
  {
    "objectID": "doc/cours/introduction.html#déclaration-dune-variable",
    "href": "doc/cours/introduction.html#déclaration-dune-variable",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "2.2 Déclaration d’une variable",
    "text": "2.2 Déclaration d’une variable\nEn Python, il suffit d’utiliser un nom valide et de lui assigner une valeur avec le symbole =.\nExemple :\n# Déclaration de variables\nnom = \"Alice\"   # Chaîne de caractères\nage = 25        # Entier\npi = 3.14       # Nombre flottant\nest_actif = True  # Booléen"
  },
  {
    "objectID": "doc/cours/introduction.html#les-types-de-base-en-python",
    "href": "doc/cours/introduction.html#les-types-de-base-en-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "2.3 Les Types de Base en Python",
    "text": "2.3 Les Types de Base en Python\nPython propose plusieurs types de données de base, essentiels pour la manipulation des informations.\n\n\n\n\n\n\n### Comment connaître le type d’une variable en Python ?\n\n\nPython propose une fonction intégrée appelée type() pour déterminer le type de données d’une variable.\n\n\n\n\nUtilisation de type()\nLa fonction type() prend une variable en argument et retourne son type.\nExemples de types que vous pourriez rencontrer : - str : Chaîne de caractères - int : Entier - float : Nombre décimal - bool : Valeur logique\n\nCes types de base constituent les fondations des programmes en Python et sont utilisés dans presque tous les scripts.\n\n\nChaînes de caractères (str)\nLes chaînes de caractères permettent de stocker du texte. Elles peuvent être utilisées pour manipuler des mots, des phrases ou des caractères individuels.\nExemple :\n# Déclaration de variables\nnom = \"Alice\"   # Chaîne de caractères\ntype(nom)\n\n\n\nEntiers (int)\nLes entiers représentent des nombres sans décimales, qu’ils soient positifs ou négatifs.\nExemple :\n# Déclaration de variables\nage = 25        # Entier\ntype(age)\n\n\n\nFlottants (float)\nLes flottants représentent des nombres avec des décimales, idéaux pour des calculs nécessitant des fractions. Exemple :\n# Déclaration de variables\npi = 3.14       # Nombre flottant\ntype(pi)\n\n\n\nBooléens (bool)\nLes booléens sont des valeurs logiques, pouvant être True (vrai) ou False (faux). Ils sont souvent utilisés pour effectuer des comparaisons ou contrôler le flux d’un programme. Exemple :\n# Déclaration de variables\nest_actif = True  # Booléen\ntype(est_actif)\n\n\n\nRésumé des types de base\n\n\n\nType\nDescription\n\n\n\n\nstr\nChaîne de caractères\n\n\nint\nNombres entiers\n\n\nfloat\nNombres décimaux\n\n\nbool\nValeurs logiques (True/False)"
  },
  {
    "objectID": "doc/cours/introduction.html#la-fonction-print",
    "href": "doc/cours/introduction.html#la-fonction-print",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.1 La fonction print()",
    "text": "3.1 La fonction print()\nprint() est utilisée pour afficher des informations dans la console. Elle permet de montrer le contenu de variables, des messages, ou des résultats de calcul.\nExemple :\nprint(valeur)"
  },
  {
    "objectID": "doc/cours/introduction.html#afficher-plusieurs-éléments",
    "href": "doc/cours/introduction.html#afficher-plusieurs-éléments",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.2 Afficher plusieurs éléments",
    "text": "3.2 Afficher plusieurs éléments\nVous pouvez afficher plusieurs éléments en même temps en les séparant par des virgules. Python ajoute automatiquement un espace entre ces éléments.\nExemple :\nprint(\"Bonjour\", \"Python\", 3.10)"
  },
  {
    "objectID": "doc/cours/introduction.html#formatage-des-chaînes",
    "href": "doc/cours/introduction.html#formatage-des-chaînes",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.3 Formatage des chaînes",
    "text": "3.3 Formatage des chaînes\nPour des affichages dynamiques et lisibles, plusieurs méthodes de formatage sont disponibles :\n\nConcaténation avec + : Combine des chaînes de caractères.\n\nnom = \"Alice\"\nprint(\"Bonjour, \" + nom)\n\nSubstitution avec f-strings : Insère directement des variables dans une chaîne avec une syntaxe claire.\n\nnom = \"Alice\"\nage = 25\nprint(f\"Bonjour, je m'appelle {nom} et j'ai {age} ans.\")\n\nMéthode format() : Insère des variables dans une chaîne avec des positions spécifiques.\n\nnom = \"Alice\"\nage = 25\nprint(\"Bonjour, je m'appelle {} et j'ai {} ans.\".format(nom, age))"
  },
  {
    "objectID": "doc/cours/introduction.html#caractères-spéciaux",
    "href": "doc/cours/introduction.html#caractères-spéciaux",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.4 Caractères spéciaux",
    "text": "3.4 Caractères spéciaux\nCertaines séquences spéciales permettent de modifier l’affichage : - \\\\n : Effectue un saut de ligne. - \\\\t : Ajoute une tabulation.\nCes caractères sont utiles pour structurer l’affichage dans la console.\nprint(\"Bonjour\\\\nPython\")\nprint(\"Nom:\\\\tAlice\")"
  },
  {
    "objectID": "doc/cours/introduction.html#contrôler-la-fin-de-laffichage",
    "href": "doc/cours/introduction.html#contrôler-la-fin-de-laffichage",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.5 Contrôler la fin de l’affichage",
    "text": "3.5 Contrôler la fin de l’affichage\nPar défaut, chaque appel à print() termine par un saut de ligne. Il est possible de modifier ce comportement pour afficher plusieurs éléments sur la même ligne.\nprint(\"Bonjour\", end=\" \")\nprint(\"Python !\")"
  },
  {
    "objectID": "doc/cours/introduction.html#résumé",
    "href": "doc/cours/introduction.html#résumé",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.6 Résumé",
    "text": "3.6 Résumé\n\n\n\n\n\n\n\nMéthode\nDescription\n\n\n\n\nprint()\nAffiche des données dans la console.\n\n\nConcaténation\nCombine plusieurs chaînes de caractères.\n\n\nf-strings\nInsère des variables directement dans une chaîne.\n\n\n.format()\nFormate une chaîne avec des variables.\n\n\nCaractères spéciaux\nModifie l’apparence (nouvelle ligne, tabulation)."
  },
  {
    "objectID": "doc/cours/introduction.html#les-structures-conditionnelles",
    "href": "doc/cours/introduction.html#les-structures-conditionnelles",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "4.1 Les Structures conditionnelles",
    "text": "4.1 Les Structures conditionnelles\nLes structures conditionnelles permettent d’exécuter des blocs de code uniquement si une condition est remplie.\n\n\nLa condition if\nLa condition if est utilisée pour vérifier si une expression est vraie. Si c’est le cas, le bloc de code associé est exécuté.\n\nSyntaxe de base\nif condition:\n    # Code à exécuter si la condition est vraie\n\n\n\nExemple simple\nnombre = 10\n\nif nombre &gt; 0:\n    print(\"Le nombre est positif.\")\n\n\n\nAjout de else\nL’instruction else permet d’exécuter un bloc de code si la condition est fausse.\nnombre = -5\nif nombre &gt; 0:\n    print(\"Le nombre est positif.\")\nelse:\n    print(\"Le nombre est négatif ou nul.\")\n\n\n\nAjout de elif\nL’instruction elif permet de vérifier plusieurs conditions successives.\nnombre = 0\n\nif nombre &gt; 0:\n    print(\"Le nombre est positif.\")\nelif nombre == 0:\n    print(\"Le nombre est nul.\")\nelse:\n    print(\"Le nombre est négatif.\")\n\n\n\n\nConditions imbriquées\nLes if peuvent être imbriqués pour vérifier des conditions multiples.\nage = 20\ncitoyen = True\n\nif age &gt;= 18:\n    if citoyen:\n        print(\"Vous pouvez voter.\")\n    else:\n        print(\"Vous ne pouvez pas voter, même si vous êtes majeur.\")\nelse:\n    print(\"Vous êtes mineur.\")\n\n\n\nComparaisons en Python\nLes opérateurs de comparaison permettent d’évaluer des expressions.\n\n\n\nOpérateur\nDescription\n\n\n\n\n==\nÉgalité\n\n\n!=\nDifférence\n\n\n&lt;\nInférieur à\n\n\n&lt;=\nInférieur ou égal à\n\n\n&gt;\nSupérieur à\n\n\n&gt;=\nSupérieur ou égal à\n\n\n\n\n\n\nOpérateurs logiques\nLes opérateurs logiques permettent de combiner plusieurs conditions.\n\n\n\nOpérateur\nDescription\n\n\n\n\nand\nToutes les conditions doivent être vraies.\n\n\nor\nAu moins une des conditions doit être vraie.\n\n\nnot\nInverse le résultat de la condition."
  },
  {
    "objectID": "doc/cours/introduction.html#les-boucles-en-python",
    "href": "doc/cours/introduction.html#les-boucles-en-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "4.2 Les Boucles en Python",
    "text": "4.2 Les Boucles en Python\nLes boucles permettent de répéter des actions tant qu’une condition est vraie ou pour un nombre fixe d’itérations.\n\n\nLa boucle for\n\nLa boucle for est utilisée pour parcourir une séquence (liste, chaîne de caractères, etc.).\nChaque élément de la séquence est traité successivement.\n\n\n\n\nLa boucle while\n\nLa boucle while répète un bloc de code tant qu’une condition est vraie.\nAttention aux boucles infinies : assurez-vous que la condition de sortie est atteinte.\n\n\n\n\nContrôle des boucles\n\n\n\n\n\n\n\nInstruction\nDescription\n\n\n\n\nbreak\nInterrompt la boucle immédiatement, même si la condition n’est pas terminée.\n\n\ncontinue\nPasse à l’itération suivante sans exécuter le reste du bloc de code actuel.\n\n\npass\nNe fait rien. Utilisé comme espace réservé dans une boucle ou une condition."
  },
  {
    "objectID": "doc/cours/introduction.html#résumé-1",
    "href": "doc/cours/introduction.html#résumé-1",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "4.3 Résumé",
    "text": "4.3 Résumé\n\n\n\n\n\n\n\nStructure\nDescription\n\n\n\n\nif\nExécute un bloc si une condition est vraie.\n\n\nelif\nAjoute des conditions supplémentaires.\n\n\nelse\nDéfinit un bloc exécuté si toutes les conditions sont fausses.\n\n\nfor\nParcourt une séquence ou un intervalle.\n\n\nwhile\nRépète un bloc tant qu’une condition est vraie.\n\n\nbreak\nInterrompt une boucle.\n\n\ncontinue\nSaute à l’itération suivante.\n\n\npass\nNe fait rien (utile pour des blocs vides).\n\n\n\nAvec ces structures, vous pouvez écrire des programmes dynamiques et efficaces en Python !"
  }
]