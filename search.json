[
  {
    "objectID": "doc/cours/intro.html",
    "href": "doc/cours/intro.html",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "",
    "text": "18h : CM+TP\nContact : natachayepnga@gmail.com\nOutils recommandés : VS Code, Jupyter Notebook"
  },
  {
    "objectID": "doc/cours/intro.html#programmation-avec-python-bases-et-applications",
    "href": "doc/cours/intro.html#programmation-avec-python-bases-et-applications",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "",
    "text": "18h : CM+TP\nContact : natachayepnga@gmail.com\nOutils recommandés : VS Code, Jupyter Notebook"
  },
  {
    "objectID": "doc/cours/intro.html#objectifs",
    "href": "doc/cours/intro.html#objectifs",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Objectifs",
    "text": "Objectifs\n\nComprendre les bases du langage Python.\nManipuler les variables, types de données et structures de contrôle.\nExplorer les bibliothèques populaires : NumPy, Pandas, Matplotlib.\nIntroduire les concepts de machine learning avec Scikit-learn.\nRéaliser un projet intégrant toutes les notions vues."
  },
  {
    "objectID": "doc/cours/intro.html#python",
    "href": "doc/cours/intro.html#python",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Python",
    "text": "Python\n\nLangage polyvalent : data science, machine learning, développement web, automatisation.\nAvantages :\n\nSyntaxe simple et claire.\nLarge écosystème de bibliothèques open source.\nUtilisé par des entreprises, start-ups, et dans la recherche académique."
  },
  {
    "objectID": "doc/cours/intro.html#organisation-des-tp",
    "href": "doc/cours/intro.html#organisation-des-tp",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Organisation des TP",
    "text": "Organisation des TP\n\n5 TP + 1 projet final\nEnvironnements : VS Code, Jupyter Notebook, Google Colab.\nApproche : Alternance entre exercices guidés et explorations libres.\nLes projets doivent suivre une structuration rigoureuse :\n\nNettoyage des données.\nVisualisation.\nAnalyse et modélisation."
  },
  {
    "objectID": "doc/cours/intro.html#ce-quil-faut-faire",
    "href": "doc/cours/intro.html#ce-quil-faut-faire",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Ce qu’il faut faire",
    "text": "Ce qu’il faut faire\n\nLisez attentivement les consignes de chaque TP.\nEssayez de résoudre les exercices par vous-même.\nRecherchez dans les cours et tutoriels en ligne.\nTravaillez en binôme pour échanger des idées.\nPosez des questions à l’enseignante en cas de blocage."
  },
  {
    "objectID": "doc/cours/intro.html#à-ne-pas-faire",
    "href": "doc/cours/intro.html#à-ne-pas-faire",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "À ne pas faire",
    "text": "À ne pas faire\n\nUtiliser ChatGPT sans comprendre la solution.\nCopier/coller des réponses sans vérifier leur validité.\nNe pas documenter votre code ou vos démarches.\n\n\nNote : Ces pratiques nuisent à l’apprentissage et à la compréhension."
  },
  {
    "objectID": "doc/cours/intro.html#évaluation",
    "href": "doc/cours/intro.html#évaluation",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Évaluation",
    "text": "Évaluation\n\nPartie 1 : Projet à faire à la maison.\n\nSujet distribué une semaine avant la date de l’examen.\nAnalyse et exploration d’un dataset fourni.\nÀ rendre sous forme d’un notebook bien structuré :\n\nExplication des étapes de nettoyage.\nVisualisation des données et interprétation.\nConclusions et recommandations.\n\n\n\n\n\nPartie 2 : QCM.\n\nDurée : 2h.\nQuestions portant sur les concepts abordés pendant le cours et les TP.\nLa date sera définie à l’avance."
  },
  {
    "objectID": "doc/cours/intro.html#bibliographie",
    "href": "doc/cours/intro.html#bibliographie",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nDocumentation officielle Python\n[Cours excellent de l’ENSAE] (https://pythonds.linogaliana.fr/)\nPython for Everybody\nPython Crash Course (Livre)\nSite\nMémento Bases Python 3 de Laurent POINTAL, 2012-2013\nAbrégé Dense Python 3.2 de Laurent POINTAL, 2012\n\n\n\nA Quick, Painless Tutorial on the Python Language de Norman Matloff, 2008 (PDF)\nTutoriels Python en ligne\nDernière version de Python et interface IDLE\nOutil IEP (Interactive Editor for Python)\nThink Python - How to Think Like a Computer Scientist d’Allen B. Downey, 2014\nApprendre à programmer avec Python de Gérard Swinnen, 2009\n\n\n\nUne introduction à Python 3 de Robert CORDEAU et Laurent POINTAL, 2010\nCours Python de l’École Polytechnique Universitaire UMPC\nDocumentation sur l’intégration C/C++/Python\nPython Development with PyDev and Eclipse - Tutorial de Lars Vogel, 2011\nApprenez à programmer en Python - Site du Zéro - Vincent Le Goff, 2011\nAssociation francophone Python"
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#programmation-avec-python-bases-et-applications",
    "href": "doc/cours/intro-python-slides.html#programmation-avec-python-bases-et-applications",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Programmation avec Python : Bases et Applications",
    "text": "Programmation avec Python : Bases et Applications\n\n18h : CM+TP\nContact : natachayepnga@gmail.com\nOutils recommandés : VS Code, Jupyter Notebook"
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#objectifs",
    "href": "doc/cours/intro-python-slides.html#objectifs",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Objectifs",
    "text": "Objectifs\n\nComprendre les bases du langage Python.\nManipuler les variables, types de données et structures de contrôle.\nExplorer les bibliothèques populaires : NumPy, Pandas, Matplotlib.\nIntroduire les concepts de machine learning avec Scikit-learn.\nRéaliser un projet intégrant toutes les notions vues."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#python",
    "href": "doc/cours/intro-python-slides.html#python",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Python",
    "text": "Python\n\nLangage polyvalent : data science, machine learning, développement web, automatisation.\nAvantages :\n\nSyntaxe simple et claire.\nLarge écosystème de bibliothèques open source.\nUtilisé par des entreprises, start-ups, et dans la recherche académique."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#organisation-des-tp",
    "href": "doc/cours/intro-python-slides.html#organisation-des-tp",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Organisation des TP",
    "text": "Organisation des TP\n\n5 TP + 1 projet final\nEnvironnements : VS Code, Jupyter Notebook, Google Colab.\nApproche : Alternance entre exercices guidés et explorations libres.\nLes projets doivent suivre une structuration rigoureuse :\n\nNettoyage des données.\nVisualisation.\nAnalyse et modélisation."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#ce-quil-faut-faire",
    "href": "doc/cours/intro-python-slides.html#ce-quil-faut-faire",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Ce qu’il faut faire",
    "text": "Ce qu’il faut faire\n\nLisez attentivement les consignes de chaque TP.\nEssayez de résoudre les exercices par vous-même.\nRecherchez dans les cours et tutoriels en ligne.\nTravaillez en binôme pour échanger des idées.\nPosez des questions à l’enseignante en cas de blocage."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#à-ne-pas-faire",
    "href": "doc/cours/intro-python-slides.html#à-ne-pas-faire",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "À ne pas faire",
    "text": "À ne pas faire\n\nUtiliser ChatGPT sans comprendre la solution.\nCopier/coller des réponses sans vérifier leur validité.\nNe pas documenter votre code ou vos démarches.\n\n\nNote : Ces pratiques nuisent à l’apprentissage et à la compréhension."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#évaluation",
    "href": "doc/cours/intro-python-slides.html#évaluation",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Évaluation",
    "text": "Évaluation\n\nPartie 1 : Projet à faire à la maison.\n\nSujet distribué une semaine avant la date de l’examen.\nAnalyse et exploration d’un dataset fourni.\nÀ rendre sous forme d’un notebook bien structuré :\n\nExplication des étapes de nettoyage.\nVisualisation des données et interprétation.\nConclusions et recommandations."
  },
  {
    "objectID": "doc/cours/intro-python-slides.html#bibliographie",
    "href": "doc/cours/intro-python-slides.html#bibliographie",
    "title": "Programmation avec Python : Bases et Applications",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nDocumentation officielle Python\n[Cours excellent de l’ENSAE] (https://pythonds.linogaliana.fr/)\nPython for Everybody\nPython Crash Course (Livre)\nSite\nMémento Bases Python 3 de Laurent POINTAL, 2012-2013\nAbrégé Dense Python 3.2 de Laurent POINTAL, 2012"
  },
  {
    "objectID": "doc/cours/typedonnees.html",
    "href": "doc/cours/typedonnees.html",
    "title": "Les Types de données en Python",
    "section": "",
    "text": "Python propose des types de données avancés pour manipuler des collections de données ou des structures complexes. Ces types sont essentiels pour gérer des informations organisées."
  },
  {
    "objectID": "doc/cours/typedonnees.html#les-listes-list",
    "href": "doc/cours/typedonnees.html#les-listes-list",
    "title": "Les Types de données en Python",
    "section": "1 Les Listes (list)",
    "text": "1 Les Listes (list)\nLes listes sont des collections ordonnées et modifiables. Elles peuvent contenir des éléments de types différents.\nCaractéristiques :\n\nOrdonnées : Les éléments conservent leur position dans l’ordre dans lequel ils ont été ajoutés.\nModifiables : Les listes peuvent être modifiées après leur création (ajout, suppression, modification d’éléments).\nHétérogènes : Une liste peut contenir des éléments de différents types.\n\n\n\nCréation de listes\nLes listes peuvent être créées à partir d’une série d’éléments séparés par des virgules et entourés de crochets [ ].\nExemple :\nfruits = [\"pomme\", \"banane\", \"cerise\"]\nnombres = [1, 2, 3, 4]\nfruits.append(\"orange\")  # Ajoute un élément\nprint(fruits)\n\n\n\nOpérations CRUD sur les Listes en Python\nLes opérations CRUD (Create, Read, Update, Delete) représentent les actions fondamentales que l’on peut effectuer sur des données dans une application. Ces actions sont souvent utilisées dans la gestion des bases de données, mais elles s’appliquent également aux structures de données comme les listes en Python :\n\nCreate (Créer) : Ajouter de nouvelles données.\nRead (Lire) : Consulter ou accéder aux données existantes.\nUpdate (Mettre à jour) : Modifier les données existantes.\nDelete (Supprimer) : Effacer les données.\n\n\n\nCréer une Liste (Create)\nPour créer une liste, utilisez des crochets ([]) et séparez les éléments par des virgules.\nExemple :\n# Créer une liste vide\nma_liste = []\n\n# Créer une liste avec des éléments\nfruits = [\"pomme\", \"banane\", \"cerise\"]\nprint(fruits)  # Affiche : ['pomme', 'banane', 'cerise']\n\n\n\n\nLire les Données (Read)\n\nAccéder à un élément par son index\nLes indices commencent à 0.\nExemple :\nfruits = [\"pomme\", \"banane\", \"cerise\"]\nprint(fruits[0])  # Affiche : \"pomme\"\nprint(fruits[-1])  # Affiche : \"cerise\" (dernier élément)\n\n\n\nParcourir une liste\nVous pouvez utiliser une boucle pour parcourir tous les éléments.\nExemple :\nfor fruit in fruits:\n    print(fruit)\n\n\n\nLongueur de la liste\nUtilisez la fonction len() pour connaître le nombre d’éléments dans une liste.\nExemple :\nfruits = [\"pomme\", \"banane\", \"cerise\"]\nprint(len(fruits))  # Affiche : 3\n\n\n\n\nMettre à Jour une Liste (Update)\n\nModifier un élément existant\nAccédez à l’élément par son index et assignez-lui une nouvelle valeur.\nExemple :\nfruits = [\"pomme\", \"banane\", \"cerise\"]\nfruits[1] = \"orange\"  # Remplace \"banane\" par \"orange\"\nprint(fruits)  # Affiche : ['pomme', 'orange', 'cerise']\n\n\n\nAjouter des éléments\n\nÀ la fin de la liste :\nUtilisez la méthode append().\nExemple :\nfruits = [\"pomme\", \"orange\", \"cerise\"]\nfruits.append(\"mangue\")\nprint(fruits)  # Affiche : ['pomme', 'orange', 'cerise', 'mangue']\n\n\n\n\nÀ une position spécifique\nUtilisez la méthode insert() pour insérer un élément à une position spécifique dans une liste.\nExemple :\nfruits = [\"pomme\", \"orange\", \"cerise\", \"mangue\"]\nfruits.insert(1, \"fraise\")  # Ajoute \"fraise\" à l'index 1\nprint(fruits)  # Affiche : ['pomme', 'fraise', 'orange', 'cerise', 'mangue']\n\n\n\nFusionner deux listes\nPour fusionner deux listes, vous pouvez utiliser l’opérateur + ou la méthode extend().\nExemple :\nlegumes = [\"carotte\", \"tomate\"]\nfruits = [\"pomme\", \"fraise\", \"orange\", \"cerise\", \"mangue\"]\n\n# Fusion avec extend()\nfruits.extend(legumes)\nprint(fruits)  # Affiche : ['pomme', 'fraise', 'orange', 'cerise', 'mangue', 'carotte', 'tomate']\n\n\n\nFusionner deux listes avec l’opérateur +\nVous pouvez également utiliser l’opérateur + pour créer une nouvelle liste fusionnée.\nExemple :\nlegumes = [\"carotte\", \"tomate\"]\nfruits = [\"pomme\", \"fraise\", \"orange\", \"cerise\", \"mangue\"]\n\n# Fusion avec +\nnouvelle_liste = fruits + legumes\nprint(nouvelle_liste)  # Affiche : ['pomme', 'fraise', 'orange', 'cerise', 'mangue', 'carotte', 'tomate']\n\n\n\n\nSupprimer des Éléments (Delete)\n\nSupprimer un élément par sa valeur\nUtilisez la méthode remove().\nExemple :\nfruits.remove(\"orange\")  # Supprime \"orange\"\nprint(fruits)  # Affiche : ['pomme', 'fraise', 'cerise', 'mangue', 'carotte', 'tomate']\n\n\n\n\nSupprimer un élément par son index\nUtilisez l’instruction del ou la méthode pop().\n\nAvec del :\ndel fruits[0]  # Supprime le premier élément\nprint(fruits)  # Affiche : ['fraise', 'cerise', 'mangue', 'carotte', 'tomate']\n\n\n\n\nUtilisation de pop()\nLa méthode pop() supprime un élément d’une liste et le retourne. Par défaut, elle supprime le dernier élément de la liste, mais vous pouvez également lui spécifier un index pour supprimer un élément particulier.\nExemple :\nfruits = ['pomme', 'fraise', 'cerise', 'mangue', 'carotte', 'tomate']\n\n# Supprimer et retourner le dernier élément\ndernier_fruit = fruits.pop()  # Supprime \"tomate\" de la liste\nprint(dernier_fruit)  # Affiche : \"tomate\"\nprint(fruits)  # Affiche : ['pomme', 'fraise', 'cerise', 'mangue', 'carotte']\n\n\n\nSupprimer tous les éléments avec clear()\nLa méthode clear() supprime tous les éléments de la liste, laissant une liste vide. Contrairement à pop(), elle ne retourne aucun élément.\nExemple :\nfruits = ['pomme', 'fraise', 'cerise', 'mangue', 'carotte']\n\n# Supprimer tous les éléments\nfruits.clear()\nprint(fruits)  # Affiche : []\n\n\n\nDifférence entre pop() et clear()\n\n\n\n\n\n\n\n\nMéthode\nFonctionnalité\nExemple de résultat\n\n\n\n\npop()\nSupprime et retourne un seul élément de la liste (par défaut, le dernier).\nfruits.pop() -&gt; retourne \"tomate\", modifie la liste.\n\n\nclear()\nSupprime tous les éléments de la liste sans retourner quoi que ce soit.\nfruits.clear() -&gt; retourne None, vide la liste.\n\n\n\n\npop() est utile lorsque vous voulez traiter ou sauvegarder l’élément supprimé.\nclear() est idéal pour réinitialiser une liste sans conserver ses éléments.\n\n\n\n\nRésumé des Méthodes CRUD sur les Listes\n\n\n\n\n\n\n\n\nOpération\nMéthode\nDescription\n\n\n\n\nCreate\n[], append(), insert()\nCréer ou ajouter des éléments.\n\n\nRead\nindex, len(), for loop\nLire ou parcourir les éléments.\n\n\nUpdate\nindex, append(), extend()\nModifier ou ajouter des éléments.\n\n\nDelete\nremove(), pop(), del, clear()\nSupprimer des éléments ou tout vider."
  },
  {
    "objectID": "doc/cours/typedonnees.html#les-tuples-tuple",
    "href": "doc/cours/typedonnees.html#les-tuples-tuple",
    "title": "Les Types de données en Python",
    "section": "2 Les Tuples (tuple)",
    "text": "2 Les Tuples (tuple)\nLes tuples sont des collections ordonnées, mais immuables (non modifiables après leur création). Ils sont souvent utilisés pour stocker des données constantes.\nCaractéristiques :\n\nOrdonnés : Les éléments conservent leur position.\nImmuables : Impossible de modifier, ajouter ou supprimer des éléments après leur création.\n\n\n\nCréation de Tuples\nUn tuple peut être créé en plaçant une série d’éléments séparés par des virgules dans des parenthèses ().\nExemple :\nmon_tuple = (1, 2, 3)\nprint(mon_tuple)  # Affiche : (1, 2, 3)\n\n\n\nOpérations CRUD sur les Tuples\nComme les tuples sont immuables, les opérations Update et Delete diffèrent légèrement de celles des listes. Voici un aperçu des actions fondamentales :\n\nCreate (Créer) : Ajouter de nouvelles données.\nRead (Lire) : Consulter ou accéder aux données existantes.\nUpdate (Mettre à jour) : Pas directement possible (les tuples sont immuables).\nDelete (Supprimer) : Vous pouvez supprimer le tuple entier mais pas ses éléments individuels.\n\n\n\nCréer un Tuple (Create)\nExemple :\n# Créer un tuple avec des éléments\nmon_tuple = (1, 'Python', 3.14)\nprint(mon_tuple)  # Affiche : (1, 'Python', 3.14)\nVous pouvez également créer un tuple sans parenthèses (packing) :\nmon_tuple = 1, 'Python', 3.14\n\n\nLire les Données (Read)\nAccéder à un élément par son index :\nmon_tuple = (1, 'Python', 3.14)\nprint(mon_tuple[1])  # Affiche : 'Python'\nParcourir un tuple avec une boucle :\nfor element in mon_tuple:\n    print(element)\nLongueur du tuple :\nprint(len(mon_tuple))  # Affiche : 3\n\n\nMettre à Jour un Tuple (Update)\nLes tuples sont immutables, donc vous ne pouvez pas modifier leurs éléments directement. Cependant, vous pouvez créer un nouveau tuple basé sur l’ancien.\nExemple :\nmon_tuple = (1, 2, 3)\nnouveau_tuple = mon_tuple + (4, 5)\nprint(nouveau_tuple)  # Affiche : (1, 2, 3, 4, 5)\n\n\nSupprimer un Tuple (Delete)\nVous ne pouvez pas supprimer un élément spécifique d’un tuple, mais vous pouvez supprimer le tuple entier.\nExemple :\nmon_tuple = (1, 2, 3)\ndel mon_tuple\n\n\n\nAvantages des Tuples\n\nImmutabilité : Protège les données contre les modifications accidentelles.\nPerformance : Les tuples sont plus rapides à traiter que les listes.\nUtilisation dans les clés de dictionnaire : Les tuples peuvent être utilisés comme clés dans un dictionnaire (contrairement aux listes).\n\nExemple :\ncoordonnees = {\n    (0, 0): 'Origine',\n    (1, 2): 'Point A'\n}\nprint(coordonnees[(1, 2)])  # Affiche : 'Point A'\n\n\nDifférences entre Listes et Tuples\n\n\n\nCaractéristique\nListe\nTuple\n\n\n\n\nMutabilité\nMutable\nImmuable\n\n\nSyntaxe\n[ ]\n( )\n\n\nPerformance\nPlus lente\nPlus rapide\n\n\nUtilisation\nDonnées modifiables\nDonnées fixes"
  },
  {
    "objectID": "doc/cours/typedonnees.html#les-dictionnaires-dict",
    "href": "doc/cours/typedonnees.html#les-dictionnaires-dict",
    "title": "Les Types de données en Python",
    "section": "3 Les Dictionnaires (dict)",
    "text": "3 Les Dictionnaires (dict)\nLes dictionnaires sont des collections non ordonnées (dans les versions antérieures à Python 3.7) qui stockent des paires clé-valeur. Chaque clé doit être unique.\nCaractéristiques :\n\nAccès rapide : Vous pouvez accéder rapidement aux valeurs à l’aide de leurs clés.\nModifiables : Vous pouvez ajouter, modifier ou supprimer des paires clé-valeur.\nClés uniques : Une clé ne peut être présente qu’une seule fois.\n\n\nCréation de Dictionnaires\nUn dictionnaire peut être créé en utilisant des accolades {} et des paires clé-valeur séparées par des deux-points :.\nExemple :\nmon_dict = {\n    'nom': 'Alice',\n    'age': 25,\n    'ville': 'Paris'\n}\nprint(mon_dict)  # Affiche : {'nom': 'Alice', 'age': 25, 'ville': 'Paris'}\n\n\nOpérations CRUD sur les Dictionnaires\nLes dictionnaires permettent les opérations fondamentales CRUD (Create, Read, Update, Delete) comme suit :\n\nCreate (Créer) : Ajouter de nouvelles paires clé-valeur.\nRead (Lire) : Accéder à une valeur via sa clé.\nUpdate (Mettre à jour) : Modifier la valeur associée à une clé existante ou ajouter une nouvelle clé.\nDelete (Supprimer) : Supprimer une paire clé-valeur.\n\n\nCréer un Dictionnaire (Create)\nExemple :\n# Créer un dictionnaire vide\nmon_dict = {}\n\n# Ajouter des paires clé-valeur\nmon_dict['nom'] = 'Alice'\nmon_dict['age'] = 25\nprint(mon_dict)  # Affiche : {'nom': 'Alice', 'age': 25}\n\n\nLire les Données (Read)\nAccéder à une valeur par sa clé :\nmon_dict = {'nom': 'Alice', 'age': 25, 'ville': 'Paris'}\nprint(mon_dict['nom'])  # Affiche : Alice\nUtiliser la méthode get() pour éviter les erreurs :\nprint(mon_dict.get('pays', 'Clé introuvable'))  # Affiche : Clé introuvable\nParcourir un dictionnaire :\nfor cle, valeur in mon_dict.items():\n    print(f'{cle} : {valeur}')\nClés et valeurs :\nprint(mon_dict.keys())   # Affiche les clés : dict_keys(['nom', 'age', 'ville'])\nprint(mon_dict.values()) # Affiche les valeurs : dict_values(['Alice', 25, 'Paris'])\n\n\nMettre à Jour un Dictionnaire (Update)\nAjouter ou modifier une clé :\nmon_dict = {'nom': 'Alice', 'age': 25}\nmon_dict['ville'] = 'Paris'  # Ajout\nmon_dict['age'] = 26         # Mise à jour\nprint(mon_dict)  # Affiche : {'nom': 'Alice', 'age': 26, 'ville': 'Paris'}\nFusionner deux dictionnaires :\nautre_dict = {'pays': 'France', 'profession': 'Ingénieure'}\nmon_dict.update(autre_dict)\nprint(mon_dict)  # Affiche : {'nom': 'Alice', 'age': 26, 'ville': 'Paris', 'pays': 'France', 'profession': 'Ingénieure'}\n\n\nSupprimer des Éléments (Delete)\nSupprimer une paire clé-valeur :\nmon_dict = {'nom': 'Alice', 'age': 25, 'ville': 'Paris'}\ndel mon_dict['age']\nprint(mon_dict)  # Affiche : {'nom': 'Alice', 'ville': 'Paris'}\nSupprimer et retourner une valeur avec pop() :\nville = mon_dict.pop('ville')\nprint(ville)  # Affiche : Paris\nprint(mon_dict)  # Affiche : {'nom': 'Alice'}\nSupprimer tous les éléments avec clear() :\nmon_dict.clear()\nprint(mon_dict)  # Affiche : {}\n\n\n\nAvantages des Dictionnaires\n\nRapidité : Accès direct aux valeurs via les clés.\nFlexible : Peut contenir des données de types variés.\nOrganisation : Idéal pour structurer des données complexes.\n\nExemple :\nutilisateur = {\n    'id': 123,\n    'nom': 'Alice',\n    'contact': {\n        'email': 'alice@example.com',\n        'telephone': '123-456-7890'\n    }\n}\nprint(utilisateur['contact']['email'])  # Affiche : alice@example.com\n\n\nDifférences entre Listes et Dictionnaires\n\n\n\n\n\n\n\n\nCaractéristique\nListe\nDictionnaire\n\n\n\n\nAccès aux données\nPar index numérique\nPar clé\n\n\nStructure\nSéquence ordonnée\nPaires clé-valeur\n\n\nMutabilité\nMutable\nMutable (clés immuables)"
  },
  {
    "objectID": "doc/cours/typedonnees.html#les-ensembles-set",
    "href": "doc/cours/typedonnees.html#les-ensembles-set",
    "title": "Les Types de données en Python",
    "section": "4 Les Ensembles (set)",
    "text": "4 Les Ensembles (set)\nLes ensembles sont des collections non ordonnées et uniques (chaque élément apparaît une seule fois). Ils sont utiles pour éliminer les doublons ou effectuer des opérations mathématiques sur des ensembles.\nCaractéristiques :\n\nNon ordonnés : Les éléments n’ont pas de position fixe.\nÉléments uniques : Les doublons sont automatiquement supprimés.\nOpérations mathématiques : Permettent des opérations comme l’union, l’intersection, la différence, etc.\n\n\nCréation d’Ensembles\nUn ensemble peut être créé en utilisant la fonction set() ou en plaçant des éléments entre accolades {}.\nExemple :\nmon_set = {1, 2, 3, 4}\nprint(mon_set)  # Affiche : {1, 2, 3, 4}\n\n# Création d'un ensemble à partir d'une liste\nmon_set = set([1, 2, 2, 3])\nprint(mon_set)  # Affiche : {1, 2, 3} (les doublons sont supprimés)\n\n\nOpérations CRUD sur les Ensembles\nLes ensembles prennent en charge les opérations fondamentales CRUD (Create, Read, Update, Delete) :\n\nCreate (Créer) : Ajouter de nouveaux éléments.\nRead (Lire) : Vérifier la présence d’un élément.\nUpdate (Mettre à jour) : Ajouter ou supprimer des éléments.\nDelete (Supprimer) : Supprimer des éléments ou réinitialiser l’ensemble.\n\n\nCréer un Ensemble (Create)\nExemple :\n# Créer un ensemble vide\nmon_set = set()\n\n# Ajouter des éléments\nmon_set.add(1)\nmon_set.add(2)\nprint(mon_set)  # Affiche : {1, 2}\n\n\nLire les Données (Read)\nVérifier la présence d’un élément :\nmon_set = {1, 2, 3}\nprint(1 in mon_set)  # Affiche : True\nprint(4 in mon_set)  # Affiche : False\nParcourir un ensemble avec une boucle :\nfor element in mon_set:\n    print(element)\nTaille de l’ensemble :\nprint(len(mon_set))  # Affiche : 3\n\n\nMettre à Jour un Ensemble (Update)\nAjouter des éléments :\nmon_set = {1, 2}\nmon_set.add(3)  # Ajoute un seul élément\nmon_set.update([4, 5])  # Ajoute plusieurs éléments\nprint(mon_set)  # Affiche : {1, 2, 3, 4, 5}\nSupprimer des éléments :\nAvec remove() :\nmon_set.remove(2)  # Supprime 2 de l'ensemble\nprint(mon_set)  # Affiche : {1, 3, 4, 5}\nAvec discard() (ne lève pas d’erreur si l’élément n’existe pas) :\nmon_set.discard(10)  # Aucun effet si 10 n'est pas présent\n\n\nSupprimer des Éléments (Delete)\nSupprimer un élément avec pop() :\nmon_set = {1, 2, 3}\nelement = mon_set.pop()  # Supprime et retourne un élément aléatoire\nprint(element)  # Affiche : 1 (ou un autre élément)\nprint(mon_set)  # Affiche : {2, 3}\nSupprimer tous les éléments avec clear() :\nmon_set.clear()\nprint(mon_set)  # Affiche : set()\n\n\n\nOpérations Mathématiques avec les Ensembles\nLes ensembles permettent des opérations mathématiques classiques :\nUnion : Combine tous les éléments des deux ensembles.\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nprint(set1 | set2)  # Affiche : {1, 2, 3, 4, 5}\nIntersection : Récupère les éléments communs aux deux ensembles.\nprint(set1 & set2)  # Affiche : {3}\nDifférence : Récupère les éléments présents dans le premier ensemble mais pas dans le second.\nprint(set1 - set2)  # Affiche : {1, 2}\nDifférence Symétrique : Récupère les éléments présents dans un seul des deux ensembles.\nprint(set1 ^ set2)  # Affiche : {1, 2, 4, 5}"
  },
  {
    "objectID": "doc/cours/typedonnees-slides.html#les-listes-list",
    "href": "doc/cours/typedonnees-slides.html#les-listes-list",
    "title": "Les Types de données en Python",
    "section": "Les Listes (list)",
    "text": "Les Listes (list)\nLes listes sont des collections ordonnées et modifiables. Elles peuvent contenir des éléments de types différents.\nCaractéristiques :\n\nOrdonnées : Les éléments conservent leur position dans l’ordre dans lequel ils ont été ajoutés.\nModifiables : Les listes peuvent être modifiées après leur création (ajout, suppression, modification d’éléments).\nHétérogènes : Une liste peut contenir des éléments de différents types."
  },
  {
    "objectID": "doc/cours/typedonnees-slides.html#les-tuples-tuple",
    "href": "doc/cours/typedonnees-slides.html#les-tuples-tuple",
    "title": "Les Types de données en Python",
    "section": "Les Tuples (tuple)",
    "text": "Les Tuples (tuple)\nLes tuples sont des collections ordonnées, mais immuables (non modifiables après leur création). Ils sont souvent utilisés pour stocker des données constantes.\nCaractéristiques :\n\nOrdonnés : Les éléments conservent leur position.\nImmuables : Impossible de modifier, ajouter ou supprimer des éléments après leur création."
  },
  {
    "objectID": "doc/cours/typedonnees-slides.html#les-dictionnaires-dict",
    "href": "doc/cours/typedonnees-slides.html#les-dictionnaires-dict",
    "title": "Les Types de données en Python",
    "section": "Les Dictionnaires (dict)",
    "text": "Les Dictionnaires (dict)\nLes dictionnaires sont des collections non ordonnées (dans les versions antérieures à Python 3.7) qui stockent des paires clé-valeur. Chaque clé doit être unique.\nCaractéristiques :\n\nAccès rapide : Vous pouvez accéder rapidement aux valeurs à l’aide de leurs clés.\nModifiables : Vous pouvez ajouter, modifier ou supprimer des paires clé-valeur.\nClés uniques : Une clé ne peut être présente qu’une seule fois."
  },
  {
    "objectID": "doc/cours/typedonnees-slides.html#les-ensembles-set",
    "href": "doc/cours/typedonnees-slides.html#les-ensembles-set",
    "title": "Les Types de données en Python",
    "section": "Les Ensembles (set)",
    "text": "Les Ensembles (set)\nLes ensembles sont des collections non ordonnées et uniques (chaque élément apparaît une seule fois). Ils sont utiles pour éliminer les doublons ou effectuer des opérations mathématiques sur des ensembles.\nCaractéristiques :\n\nNon ordonnés : Les éléments n’ont pas de position fixe.\nÉléments uniques : Les doublons sont automatiquement supprimés.\nOpérations mathématiques : Permettent des opérations comme l’union, l’intersection, la différence, etc."
  },
  {
    "objectID": "doc/tp/tp1.html",
    "href": "doc/tp/tp1.html",
    "title": "Bien Démarrer Avec Python",
    "section": "",
    "text": "Ce TP est composé de deux parties principales qui vous guideront à travers les bases de Python, les structures de contrôle et les types de données.\n\n\nCe fichier introduit les concepts de base pour débuter avec Python : - Installation et configuration de l’environnement Python. - Premiers pas avec les types de données (entiers, flottants, chaînes, etc.). - Utilisation de l’instruction print() pour afficher des résultats. - Premiers calculs et manipulations de variables.\nTélécharger le notebook : Bien démarrer avec Python\n\n\n\n\nDans cette partie, vous apprendrez à structurer vos programmes et à manipuler les données efficacement : - Les structures de contrôle comme les boucles for et while. - Les conditions if, elif, et else. - Manipulation des types de données complexes comme les listes, dictionnaires, et ensembles. - Exercices pratiques pour appliquer les concepts étudiés.\n\n\n\n\nÀ la fin de ce TP, vous serez capable de : - Manipuler les types de données de base en Python. - Utiliser des structures conditionnelles et des boucles pour contrôler l’exécution de votre code. - Résoudre des exercices pratiques pour renforcer vos compétences.\nTéléchargez les fichiers et commencez votre apprentissage dès maintenant !"
  },
  {
    "objectID": "doc/tp/tp1.html#partie-1-bien-démarrer-avec-python",
    "href": "doc/tp/tp1.html#partie-1-bien-démarrer-avec-python",
    "title": "Bien Démarrer Avec Python",
    "section": "",
    "text": "Ce fichier introduit les concepts de base pour débuter avec Python : - Installation et configuration de l’environnement Python. - Premiers pas avec les types de données (entiers, flottants, chaînes, etc.). - Utilisation de l’instruction print() pour afficher des résultats. - Premiers calculs et manipulations de variables.\nTélécharger le notebook : Bien démarrer avec Python"
  },
  {
    "objectID": "doc/tp/tp1.html#partie-2-structures-de-contrôle-et-types-de-données",
    "href": "doc/tp/tp1.html#partie-2-structures-de-contrôle-et-types-de-données",
    "title": "Bien Démarrer Avec Python",
    "section": "",
    "text": "Dans cette partie, vous apprendrez à structurer vos programmes et à manipuler les données efficacement : - Les structures de contrôle comme les boucles for et while. - Les conditions if, elif, et else. - Manipulation des types de données complexes comme les listes, dictionnaires, et ensembles. - Exercices pratiques pour appliquer les concepts étudiés."
  },
  {
    "objectID": "doc/tp/tp1.html#objectif",
    "href": "doc/tp/tp1.html#objectif",
    "title": "Bien Démarrer Avec Python",
    "section": "",
    "text": "À la fin de ce TP, vous serez capable de : - Manipuler les types de données de base en Python. - Utiliser des structures conditionnelles et des boucles pour contrôler l’exécution de votre code. - Résoudre des exercices pratiques pour renforcer vos compétences.\nTéléchargez les fichiers et commencez votre apprentissage dès maintenant !"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programmation avec Python: Analyse de données et Data visualisation",
    "section": "",
    "text": "6 sessions de 3 heures (18 heures au total)"
  },
  {
    "objectID": "index.html#contenu-du-cours",
    "href": "index.html#contenu-du-cours",
    "title": "Programmation avec Python: Analyse de données et Data visualisation",
    "section": "Contenu du cours",
    "text": "Contenu du cours\n\nIntroduction à Python\n\nPrésentation et installation\nVariables, types de données, opérateurs\n\nStructures de contrôle\n\nConditions (if, elif, else)\nBoucles (for, while)\nGestion des erreurs (try, except)\n\nLes fonctions\n\nDéfinir et appeler des fonctions\nParamètres, valeurs de retour\n\nManipulation de données avec pandas\n\nChargement de fichiers CSV/Excel\nNettoyage des données (valeurs manquantes, transformations)\nSélection et filtrage des données\n\nVisualisation des données\n\nGraphiques avec Matplotlib\nVisualisation avancée avec Seaborn\n\nProgrammation orientée objet (POO)\n\nDéfinition de classes, objets, méthodes\n\nIntroduction au Machine Learning avec Python\n\nBibliothèques essentielles : scikit-learn\nPréparation des données pour le ML (normalisation, division en train/test)\nModèles supervisés : régression linéaire et classification (KNN)\nÉvaluation des modèles : métriques (MAE, R², précision, rappel)\nNotions de surapprentissage et régularisation\n\nProjet final\n\nNettoyage, exploration, visualisation et modélisation d’un dataset"
  },
  {
    "objectID": "doc/glossaire.html",
    "href": "doc/glossaire.html",
    "title": "Glossaire",
    "section": "",
    "text": "🚧"
  },
  {
    "objectID": "doc/glossaire.html#python",
    "href": "doc/glossaire.html#python",
    "title": "Glossaire",
    "section": "Python",
    "text": "Python\nUn langage de programmation interprété, polyvalent, et accessible, utilisé dans divers domaines comme la data science, l’intelligence artificielle, le développement web et l’automatisation.\n\nVariable\nUn espace mémoire réservé pour stocker une valeur.\nEn Python, les variables n’ont pas de type explicitement défini, mais leur contenu en a un (ex : int, str, float).\nSynonymes : Identifiant, Conteneur.\n\n\nType de données\nCatégorie de données que peut prendre une variable : - int : nombres entiers. - float : nombres décimaux. - str : chaînes de caractères. - bool : valeurs booléennes (True, False).\nSynonymes : Type, Classe."
  },
  {
    "objectID": "doc/glossaire.html#structures-de-contrôle",
    "href": "doc/glossaire.html#structures-de-contrôle",
    "title": "Glossaire",
    "section": "Structures de contrôle",
    "text": "Structures de contrôle\n\nCondition\nPermet d’exécuter un bloc de code en fonction d’une condition.\nSyntaxe en Python :\nif condition:\n    # Faire quelque chose\nelif autre_condition:\n    # Faire autre chose\nelse:\n    # Faire par défaut"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#introduction",
    "href": "doc/cours/introduction-slides.html#introduction",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Introduction",
    "text": "Introduction\nPython est un langage de programmation polyvalent, apprécié pour sa simplicité et sa lisibilité. Il est utilisé dans des domaines variés comme le développement web, la data science, et l’intelligence artificielle."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#premiers-pas-avec-python",
    "href": "doc/cours/introduction-slides.html#premiers-pas-avec-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Premiers pas avec Python",
    "text": "Premiers pas avec Python\nPython est un langage polyvalent, lisible et largement utilisé. Cette section vous guide à travers les bases essentielles pour bien commencer avec Python."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#quest-ce-quune-variable",
    "href": "doc/cours/introduction-slides.html#quest-ce-quune-variable",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Qu’est-ce qu’une variable ?",
    "text": "Qu’est-ce qu’une variable ?\nUne variable est un conteneur permettant de stocker une valeur ou des données. En Python, une variable peut contenir différents types de données comme des nombres, du texte, ou des structures complexes."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#déclaration-dune-variable",
    "href": "doc/cours/introduction-slides.html#déclaration-dune-variable",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Déclaration d’une variable",
    "text": "Déclaration d’une variable\nEn Python, il suffit d’utiliser un nom valide et de lui assigner une valeur avec le symbole =.\nExemple :\n# Déclaration de variables\nnom = \"Alice\"   # Chaîne de caractères\nage = 25        # Entier\npi = 3.14       # Nombre flottant\nest_actif = True  # Booléen"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#les-types-de-base-en-python",
    "href": "doc/cours/introduction-slides.html#les-types-de-base-en-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Les Types de Base en Python",
    "text": "Les Types de Base en Python\nPython propose plusieurs types de données de base, essentiels pour la manipulation des informations."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#la-fonction-print",
    "href": "doc/cours/introduction-slides.html#la-fonction-print",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "La fonction print()",
    "text": "La fonction print()\nprint() est utilisée pour afficher des informations dans la console. Elle permet de montrer le contenu de variables, des messages, ou des résultats de calcul.\nExemple :\nprint(valeur)"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#afficher-plusieurs-éléments",
    "href": "doc/cours/introduction-slides.html#afficher-plusieurs-éléments",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Afficher plusieurs éléments",
    "text": "Afficher plusieurs éléments\nVous pouvez afficher plusieurs éléments en même temps en les séparant par des virgules. Python ajoute automatiquement un espace entre ces éléments.\nExemple :\nprint(\"Bonjour\", \"Python\", 3.10)"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#formatage-des-chaînes",
    "href": "doc/cours/introduction-slides.html#formatage-des-chaînes",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Formatage des chaînes",
    "text": "Formatage des chaînes\nPour des affichages dynamiques et lisibles, plusieurs méthodes de formatage sont disponibles :\n\nConcaténation avec + : Combine des chaînes de caractères.\n\nnom = \"Alice\"\nprint(\"Bonjour, \" + nom)\n\nSubstitution avec f-strings : Insère directement des variables dans une chaîne avec une syntaxe claire.\n\nnom = \"Alice\"\nage = 25\nprint(f\"Bonjour, je m'appelle {nom} et j'ai {age} ans.\")\n\nMéthode format() : Insère des variables dans une chaîne avec des positions spécifiques.\n\nnom = \"Alice\"\nage = 25\nprint(\"Bonjour, je m'appelle {} et j'ai {} ans.\".format(nom, age))"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#caractères-spéciaux",
    "href": "doc/cours/introduction-slides.html#caractères-spéciaux",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Caractères spéciaux",
    "text": "Caractères spéciaux\nCertaines séquences spéciales permettent de modifier l’affichage : - \\\\n : Effectue un saut de ligne. - \\\\t : Ajoute une tabulation.\nCes caractères sont utiles pour structurer l’affichage dans la console.\nprint(\"Bonjour\\\\nPython\")\nprint(\"Nom:\\\\tAlice\")"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#contrôler-la-fin-de-laffichage",
    "href": "doc/cours/introduction-slides.html#contrôler-la-fin-de-laffichage",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Contrôler la fin de l’affichage",
    "text": "Contrôler la fin de l’affichage\nPar défaut, chaque appel à print() termine par un saut de ligne. Il est possible de modifier ce comportement pour afficher plusieurs éléments sur la même ligne.\nprint(\"Bonjour\", end=\" \")\nprint(\"Python !\")"
  },
  {
    "objectID": "doc/cours/introduction-slides.html#résumé",
    "href": "doc/cours/introduction-slides.html#résumé",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Résumé",
    "text": "Résumé\n\n\n\n\n\n\n\nMéthode\nDescription\n\n\n\n\nprint()\nAffiche des données dans la console.\n\n\nConcaténation\nCombine plusieurs chaînes de caractères.\n\n\nf-strings\nInsère des variables directement dans une chaîne.\n\n\n.format()\nFormate une chaîne avec des variables.\n\n\nCaractères spéciaux\nModifie l’apparence (nouvelle ligne, tabulation)."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#les-structures-conditionnelles",
    "href": "doc/cours/introduction-slides.html#les-structures-conditionnelles",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Les Structures conditionnelles",
    "text": "Les Structures conditionnelles\nLes structures conditionnelles permettent d’exécuter des blocs de code uniquement si une condition est remplie."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#les-boucles-en-python",
    "href": "doc/cours/introduction-slides.html#les-boucles-en-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Les Boucles en Python",
    "text": "Les Boucles en Python\nLes boucles permettent de répéter des actions tant qu’une condition est vraie ou pour un nombre fixe d’itérations."
  },
  {
    "objectID": "doc/cours/introduction-slides.html#résumé-1",
    "href": "doc/cours/introduction-slides.html#résumé-1",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "Résumé",
    "text": "Résumé\n\n\n\n\n\n\n\nStructure\nDescription\n\n\n\n\nif\nExécute un bloc si une condition est vraie.\n\n\nelif\nAjoute des conditions supplémentaires.\n\n\nelse\nDéfinit un bloc exécuté si toutes les conditions sont fausses.\n\n\nfor\nParcourt une séquence ou un intervalle.\n\n\nwhile\nRépète un bloc tant qu’une condition est vraie.\n\n\nbreak\nInterrompt une boucle.\n\n\ncontinue\nSaute à l’itération suivante.\n\n\npass\nNe fait rien (utile pour des blocs vides).\n\n\n\nAvec ces structures, vous pouvez écrire des programmes dynamiques et efficaces en Python !"
  },
  {
    "objectID": "doc/cours/introduction.html",
    "href": "doc/cours/introduction.html",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "",
    "text": "Python est un langage de programmation polyvalent, apprécié pour sa simplicité et sa lisibilité. Il est utilisé dans des domaines variés comme le développement web, la data science, et l’intelligence artificielle.\n\n\n\n\nPython est un langage interprété, open source, et multiplateforme.\nCréé par Guido van Rossum en 1989 (première version en 1991).\nPoints forts :\n\nSyntaxe simple et lisible.\nLarge écosystème de bibliothèques.\n\n\n\n\n\n\n\nPratique régulière : Codez régulièrement pour solidifier vos bases.\nExplorez des projets simples : Calculatrice, jeu de devinettes, gestion d’inventaire.\nUtilisez les ressources disponibles :\n\nDocumentation officielle : python.org/doc.\nPlateformes d’exercices : LeetCode, Hackerrank.\n\n\n\n\n\n\n\n\n\nTéléchargez Python depuis python.org.\n\n\n\n\n\n\n\n\nQu’est-ce que VS Code ?\n\nUn éditeur de code léger, puissant et extensible, développé par Microsoft.\n\nIdéal pour écrire et exécuter des scripts Python grâce à ses extensions.\n\nInstaller VS Code :\n\nTéléchargez-le sur code.visualstudio.com.\n\nInstallez l’extension Python via le Visual Studio Code Marketplace :\n\nOuvrez VS Code.\nAllez dans l’onglet des extensions (icône avec des blocs).\nRecherchez Python et cliquez sur “Installer”.\n\n\n\n\n\n\n\n\nQu’est-ce qu’Anaconda ?\n\nUne distribution Python incluant Jupyter Notebook, des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.) et un gestionnaire d’environnements.\n\nIdéal pour la data science et le machine learning.\n\nInstaller Anaconda :\n\nTéléchargez-le depuis anaconda.com.\n\nSuivez les instructions pour votre système d’exploitation (Windows, macOS, Linux).\n\nAvantages :\n\nConfiguration simplifiée pour débuter.\n\nGestion facile des environnements virtuels avec conda.\n\n\n\n\n\n\n\nQu’est-ce que Jupyter Notebook ?\n\nUn environnement interactif où vous pouvez écrire et exécuter du code Python dans des blocs (appelés “cellules”).\n\nIdéal pour la data science et les visualisations.\n\nInstaller Jupyter Notebook :\n\nSi vous avez Anaconda, Jupyter est préinstallé.\n\nSinon, installez-le avec pip :\npip install notebook\n\n\n\n\n\n\n\nQu’est-ce que Google Colab ?\n\nUn environnement en ligne gratuit pour coder en Python, développé par Google.\n\nAucun besoin d’installer Python ou Jupyter : tout fonctionne dans votre navigateur.\n\nAvantage : accès à des GPU gratuits pour le machine learning.\n\nAccéder à Google Colab :\n\nRendez-vous sur colab.research.google.com.\n\nConnectez-vous avec un compte Google.\n\nCréez un nouveau notebook en cliquant sur New Notebook.\n\nFonctionnalités clés :\n\nSauvegarde automatique sur Google Drive.\n\nSupport intégré des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.).\n\n\n\n\n\n\n\n\nPython est un langage polyvalent, lisible et largement utilisé. Cette section vous guide à travers les bases essentielles pour bien commencer avec Python.\n\n\nUne variable est un conteneur permettant de stocker des données. En Python, il suffit de nommer la variable et d’y attribuer une valeur :\nx = 5\ny = \"Python\"\nprint(x, y)\n\n\n\n\nDans un script Python, tout ce qui suit le caractère # est ignoré par l’interpréteur jusqu’à la fin de la ligne. Ces lignes sont appelées commentaires et sont destinées à expliquer le code dans un langage humain.\n\n\n\n\nClarifier le code : Expliquez des portions complexes pour vous ou d’autres développeurs.\nDocumenter le fonctionnement : Fournir des indications sur le rôle d’un morceau de code ou d’une fonction.\nFaciliter la maintenance : Les commentaires rendent votre code plus compréhensible à long terme.\n\nLes commentaires ne sont pas exécutés par Python et n’affectent donc pas les performances du programme.\n\nPour ajouter un commentaire, commencez la ligne avec un #. Python ignorera tout ce qui suit ce caractère jusqu’à la fin de la ligne.\nExemple simple :\n# Ceci est un commentaire simple\nprint(\"Hello world!\")  # Affiche un message à l'écran\n\n# Déclaration de variables\nnom = \"Alice\"  # Nom de l'utilisateur\nage = 25       # Âge de l'utilisateur\n\n# Affichage des informations\nprint(f\"Nom : {nom}\")\nprint(f\"Âge : {age}\")\n\n# Cette partie affiche une salutation\nprint(\"Bonjour et bienvenue dans le cours de Python !\")\n\n\n\n\n\nSoyez concis et clair Vos commentaires doivent aller à l’essentiel et être compréhensibles.\n\n# Calcule la somme des éléments de la liste\ntotal = sum([1, 2, 3, 4])\n\n\nÉvitez les commentaires inutiles\n\nNe commentez pas des choses évidentes que le code lui-même exprime clairement.\nExemple inutile :\n# Attribue la valeur 5 à la variable x\nx = 5\n\nMettez à jour vos commentaires\n\nAssurez-vous que vos commentaires reflètent toujours le fonctionnement réel du code, surtout après des modifications.\n\n\n\n\n\nCommentaires sur une ligne\n\nIls s’écrivent avec # au début de la ligne.\n# Ce programme affiche un message\nprint(\"Bienvenue en Python !\")\n\n\nCommentaires multilignes\n\nPour commenter plusieurs lignes, vous pouvez utiliser # au début de chaque ligne ou une chaîne de caractères triple (\"\"\" ou ''') si le commentaire est temporaire.\n# Début du programme\n# Ce script montre un exemple\n# avec des commentaires multilignes.\nOu avec une chaîne triple :\n\"\"\"\nCe script illustre :\n- L'utilisation de variables\n- L'utilisation des commentaires\n\"\"\""
  },
  {
    "objectID": "doc/cours/introduction.html#introduction",
    "href": "doc/cours/introduction.html#introduction",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "",
    "text": "Python est un langage de programmation polyvalent, apprécié pour sa simplicité et sa lisibilité. Il est utilisé dans des domaines variés comme le développement web, la data science, et l’intelligence artificielle.\n\n\n\n\nPython est un langage interprété, open source, et multiplateforme.\nCréé par Guido van Rossum en 1989 (première version en 1991).\nPoints forts :\n\nSyntaxe simple et lisible.\nLarge écosystème de bibliothèques.\n\n\n\n\n\n\n\nPratique régulière : Codez régulièrement pour solidifier vos bases.\nExplorez des projets simples : Calculatrice, jeu de devinettes, gestion d’inventaire.\nUtilisez les ressources disponibles :\n\nDocumentation officielle : python.org/doc.\nPlateformes d’exercices : LeetCode, Hackerrank.\n\n\n\n\n\n\n\n\n\nTéléchargez Python depuis python.org.\n\n\n\n\n\n\n\n\nQu’est-ce que VS Code ?\n\nUn éditeur de code léger, puissant et extensible, développé par Microsoft.\n\nIdéal pour écrire et exécuter des scripts Python grâce à ses extensions.\n\nInstaller VS Code :\n\nTéléchargez-le sur code.visualstudio.com.\n\nInstallez l’extension Python via le Visual Studio Code Marketplace :\n\nOuvrez VS Code.\nAllez dans l’onglet des extensions (icône avec des blocs).\nRecherchez Python et cliquez sur “Installer”.\n\n\n\n\n\n\n\n\nQu’est-ce qu’Anaconda ?\n\nUne distribution Python incluant Jupyter Notebook, des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.) et un gestionnaire d’environnements.\n\nIdéal pour la data science et le machine learning.\n\nInstaller Anaconda :\n\nTéléchargez-le depuis anaconda.com.\n\nSuivez les instructions pour votre système d’exploitation (Windows, macOS, Linux).\n\nAvantages :\n\nConfiguration simplifiée pour débuter.\n\nGestion facile des environnements virtuels avec conda.\n\n\n\n\n\n\n\nQu’est-ce que Jupyter Notebook ?\n\nUn environnement interactif où vous pouvez écrire et exécuter du code Python dans des blocs (appelés “cellules”).\n\nIdéal pour la data science et les visualisations.\n\nInstaller Jupyter Notebook :\n\nSi vous avez Anaconda, Jupyter est préinstallé.\n\nSinon, installez-le avec pip :\npip install notebook\n\n\n\n\n\n\n\nQu’est-ce que Google Colab ?\n\nUn environnement en ligne gratuit pour coder en Python, développé par Google.\n\nAucun besoin d’installer Python ou Jupyter : tout fonctionne dans votre navigateur.\n\nAvantage : accès à des GPU gratuits pour le machine learning.\n\nAccéder à Google Colab :\n\nRendez-vous sur colab.research.google.com.\n\nConnectez-vous avec un compte Google.\n\nCréez un nouveau notebook en cliquant sur New Notebook.\n\nFonctionnalités clés :\n\nSauvegarde automatique sur Google Drive.\n\nSupport intégré des bibliothèques populaires (NumPy, Pandas, Matplotlib, etc.)."
  },
  {
    "objectID": "doc/cours/introduction.html#premiers-pas-avec-python",
    "href": "doc/cours/introduction.html#premiers-pas-avec-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "",
    "text": "Python est un langage polyvalent, lisible et largement utilisé. Cette section vous guide à travers les bases essentielles pour bien commencer avec Python.\n\n\nUne variable est un conteneur permettant de stocker des données. En Python, il suffit de nommer la variable et d’y attribuer une valeur :\nx = 5\ny = \"Python\"\nprint(x, y)\n\n\n\n\nDans un script Python, tout ce qui suit le caractère # est ignoré par l’interpréteur jusqu’à la fin de la ligne. Ces lignes sont appelées commentaires et sont destinées à expliquer le code dans un langage humain.\n\n\n\n\nClarifier le code : Expliquez des portions complexes pour vous ou d’autres développeurs.\nDocumenter le fonctionnement : Fournir des indications sur le rôle d’un morceau de code ou d’une fonction.\nFaciliter la maintenance : Les commentaires rendent votre code plus compréhensible à long terme.\n\nLes commentaires ne sont pas exécutés par Python et n’affectent donc pas les performances du programme.\n\nPour ajouter un commentaire, commencez la ligne avec un #. Python ignorera tout ce qui suit ce caractère jusqu’à la fin de la ligne.\nExemple simple :\n# Ceci est un commentaire simple\nprint(\"Hello world!\")  # Affiche un message à l'écran\n\n# Déclaration de variables\nnom = \"Alice\"  # Nom de l'utilisateur\nage = 25       # Âge de l'utilisateur\n\n# Affichage des informations\nprint(f\"Nom : {nom}\")\nprint(f\"Âge : {age}\")\n\n# Cette partie affiche une salutation\nprint(\"Bonjour et bienvenue dans le cours de Python !\")\n\n\n\n\n\nSoyez concis et clair Vos commentaires doivent aller à l’essentiel et être compréhensibles.\n\n# Calcule la somme des éléments de la liste\ntotal = sum([1, 2, 3, 4])\n\n\nÉvitez les commentaires inutiles\n\nNe commentez pas des choses évidentes que le code lui-même exprime clairement.\nExemple inutile :\n# Attribue la valeur 5 à la variable x\nx = 5\n\nMettez à jour vos commentaires\n\nAssurez-vous que vos commentaires reflètent toujours le fonctionnement réel du code, surtout après des modifications.\n\n\n\n\n\nCommentaires sur une ligne\n\nIls s’écrivent avec # au début de la ligne.\n# Ce programme affiche un message\nprint(\"Bienvenue en Python !\")\n\n\nCommentaires multilignes\n\nPour commenter plusieurs lignes, vous pouvez utiliser # au début de chaque ligne ou une chaîne de caractères triple (\"\"\" ou ''') si le commentaire est temporaire.\n# Début du programme\n# Ce script montre un exemple\n# avec des commentaires multilignes.\nOu avec une chaîne triple :\n\"\"\"\nCe script illustre :\n- L'utilisation de variables\n- L'utilisation des commentaires\n\"\"\""
  },
  {
    "objectID": "doc/cours/introduction.html#quest-ce-quune-variable",
    "href": "doc/cours/introduction.html#quest-ce-quune-variable",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "2.1 Qu’est-ce qu’une variable ?",
    "text": "2.1 Qu’est-ce qu’une variable ?\nUne variable est un conteneur permettant de stocker une valeur ou des données. En Python, une variable peut contenir différents types de données comme des nombres, du texte, ou des structures complexes."
  },
  {
    "objectID": "doc/cours/introduction.html#déclaration-dune-variable",
    "href": "doc/cours/introduction.html#déclaration-dune-variable",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "2.2 Déclaration d’une variable",
    "text": "2.2 Déclaration d’une variable\nEn Python, il suffit d’utiliser un nom valide et de lui assigner une valeur avec le symbole =.\nExemple :\n# Déclaration de variables\nnom = \"Alice\"   # Chaîne de caractères\nage = 25        # Entier\npi = 3.14       # Nombre flottant\nest_actif = True  # Booléen"
  },
  {
    "objectID": "doc/cours/introduction.html#les-types-de-base-en-python",
    "href": "doc/cours/introduction.html#les-types-de-base-en-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "2.3 Les Types de Base en Python",
    "text": "2.3 Les Types de Base en Python\nPython propose plusieurs types de données de base, essentiels pour la manipulation des informations.\n\n\nComment connaître le type d’une variable en Python ?\nPython propose une fonction intégrée appelée type() pour déterminer le type de données d’une variable.\n\n\nUtilisation de type()\nLa fonction type() prend une variable en argument et retourne son type.\nExemples de types que vous pourriez rencontrer : - str : Chaîne de caractères - int : Entier - float : Nombre décimal - bool : Valeur logique\n\nCes types de base constituent les fondations des programmes en Python et sont utilisés dans presque tous les scripts.\n\n\nChaînes de caractères (str)\nLes chaînes de caractères permettent de stocker du texte. Elles peuvent être utilisées pour manipuler des mots, des phrases ou des caractères individuels.\nExemple :\n# Déclaration de variables\nnom = \"Alice\"   # Chaîne de caractères\ntype(nom)\n\n\n\n\nEntiers (int)\nLes entiers représentent des nombres sans décimales, qu’ils soient positifs ou négatifs.\nExemple :\n# Déclaration de variables\nage = 25        # Entier\ntype(age)\n\n\n\nFlottants (float)\nLes flottants représentent des nombres avec des décimales, idéaux pour des calculs nécessitant des fractions. Exemple :\n# Déclaration de variables\npi = 3.14       # Nombre flottant\ntype(pi)\n\n\n\nBooléens (bool)\nLes booléens sont des valeurs logiques, pouvant être True (vrai) ou False (faux). Ils sont souvent utilisés pour effectuer des comparaisons ou contrôler le flux d’un programme. Exemple :\n# Déclaration de variables\nest_actif = True  # Booléen\ntype(est_actif)\n\n\n\nRésumé des types de base\n\n\n\nType\nDescription\n\n\n\n\nstr\nChaîne de caractères\n\n\nint\nNombres entiers\n\n\nfloat\nNombres décimaux\n\n\nbool\nValeurs logiques (True/False)"
  },
  {
    "objectID": "doc/cours/introduction.html#la-fonction-print",
    "href": "doc/cours/introduction.html#la-fonction-print",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.1 La fonction print()",
    "text": "3.1 La fonction print()\nprint() est utilisée pour afficher des informations dans la console. Elle permet de montrer le contenu de variables, des messages, ou des résultats de calcul.\nExemple :\nprint(valeur)"
  },
  {
    "objectID": "doc/cours/introduction.html#afficher-plusieurs-éléments",
    "href": "doc/cours/introduction.html#afficher-plusieurs-éléments",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.2 Afficher plusieurs éléments",
    "text": "3.2 Afficher plusieurs éléments\nVous pouvez afficher plusieurs éléments en même temps en les séparant par des virgules. Python ajoute automatiquement un espace entre ces éléments.\nExemple :\nprint(\"Bonjour\", \"Python\", 3.10)"
  },
  {
    "objectID": "doc/cours/introduction.html#formatage-des-chaînes",
    "href": "doc/cours/introduction.html#formatage-des-chaînes",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.3 Formatage des chaînes",
    "text": "3.3 Formatage des chaînes\nPour des affichages dynamiques et lisibles, plusieurs méthodes de formatage sont disponibles :\n\nConcaténation avec + : Combine des chaînes de caractères.\n\nnom = \"Alice\"\nprint(\"Bonjour, \" + nom)\n\nSubstitution avec f-strings : Insère directement des variables dans une chaîne avec une syntaxe claire.\n\nnom = \"Alice\"\nage = 25\nprint(f\"Bonjour, je m'appelle {nom} et j'ai {age} ans.\")\n\nMéthode format() : Insère des variables dans une chaîne avec des positions spécifiques.\n\nnom = \"Alice\"\nage = 25\nprint(\"Bonjour, je m'appelle {} et j'ai {} ans.\".format(nom, age))"
  },
  {
    "objectID": "doc/cours/introduction.html#caractères-spéciaux",
    "href": "doc/cours/introduction.html#caractères-spéciaux",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.4 Caractères spéciaux",
    "text": "3.4 Caractères spéciaux\nCertaines séquences spéciales permettent de modifier l’affichage : - \\\\n : Effectue un saut de ligne. - \\\\t : Ajoute une tabulation.\nCes caractères sont utiles pour structurer l’affichage dans la console.\nprint(\"Bonjour\\\\nPython\")\nprint(\"Nom:\\\\tAlice\")"
  },
  {
    "objectID": "doc/cours/introduction.html#contrôler-la-fin-de-laffichage",
    "href": "doc/cours/introduction.html#contrôler-la-fin-de-laffichage",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.5 Contrôler la fin de l’affichage",
    "text": "3.5 Contrôler la fin de l’affichage\nPar défaut, chaque appel à print() termine par un saut de ligne. Il est possible de modifier ce comportement pour afficher plusieurs éléments sur la même ligne.\nprint(\"Bonjour\", end=\" \")\nprint(\"Python !\")"
  },
  {
    "objectID": "doc/cours/introduction.html#résumé",
    "href": "doc/cours/introduction.html#résumé",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "3.6 Résumé",
    "text": "3.6 Résumé\n\n\n\n\n\n\n\nMéthode\nDescription\n\n\n\n\nprint()\nAffiche des données dans la console.\n\n\nConcaténation\nCombine plusieurs chaînes de caractères.\n\n\nf-strings\nInsère des variables directement dans une chaîne.\n\n\n.format()\nFormate une chaîne avec des variables.\n\n\nCaractères spéciaux\nModifie l’apparence (nouvelle ligne, tabulation)."
  },
  {
    "objectID": "doc/cours/introduction.html#les-structures-conditionnelles",
    "href": "doc/cours/introduction.html#les-structures-conditionnelles",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "4.1 Les Structures conditionnelles",
    "text": "4.1 Les Structures conditionnelles\nLes structures conditionnelles permettent d’exécuter des blocs de code uniquement si une condition est remplie.\n\n\nLa condition if\nLa condition if est utilisée pour vérifier si une expression est vraie. Si c’est le cas, le bloc de code associé est exécuté.\n\nSyntaxe de base\nif condition:\n    # Code à exécuter si la condition est vraie\n\n\n\nExemple simple\nnombre = 10\n\nif nombre &gt; 0:\n    print(\"Le nombre est positif.\")\n\n\n\nAjout de else\nL’instruction else permet d’exécuter un bloc de code si la condition est fausse.\nnombre = -5\nif nombre &gt; 0:\n    print(\"Le nombre est positif.\")\nelse:\n    print(\"Le nombre est négatif ou nul.\")\n\n\n\nAjout de elif\nL’instruction elif permet de vérifier plusieurs conditions successives.\nnombre = 0\n\nif nombre &gt; 0:\n    print(\"Le nombre est positif.\")\nelif nombre == 0:\n    print(\"Le nombre est nul.\")\nelse:\n    print(\"Le nombre est négatif.\")\n\n\n\n\nConditions imbriquées\nLes if peuvent être imbriqués pour vérifier des conditions multiples.\nage = 20\ncitoyen = True\n\nif age &gt;= 18:\n    if citoyen:\n        print(\"Vous pouvez voter.\")\n    else:\n        print(\"Vous ne pouvez pas voter, même si vous êtes majeur.\")\nelse:\n    print(\"Vous êtes mineur.\")\n\n\n\nComparaisons en Python\nLes opérateurs de comparaison permettent d’évaluer des expressions.\n\n\n\nOpérateur\nDescription\n\n\n\n\n==\nÉgalité\n\n\n!=\nDifférence\n\n\n&lt;\nInférieur à\n\n\n&lt;=\nInférieur ou égal à\n\n\n&gt;\nSupérieur à\n\n\n&gt;=\nSupérieur ou égal à\n\n\n\n\n\n\nOpérateurs logiques\nLes opérateurs logiques permettent de combiner plusieurs conditions.\n\n\n\nOpérateur\nDescription\n\n\n\n\nand\nToutes les conditions doivent être vraies.\n\n\nor\nAu moins une des conditions doit être vraie.\n\n\nnot\nInverse le résultat de la condition."
  },
  {
    "objectID": "doc/cours/introduction.html#les-boucles-en-python",
    "href": "doc/cours/introduction.html#les-boucles-en-python",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "4.2 Les Boucles en Python",
    "text": "4.2 Les Boucles en Python\nLes boucles permettent de répéter des actions tant qu’une condition est vraie ou pour un nombre fixe d’itérations.\n\n\nLa boucle for\n\nLa boucle for est utilisée pour parcourir une séquence (liste, chaîne de caractères, etc.).\nChaque élément de la séquence est traité successivement.\n\n\n\n\nLa boucle while\n\nLa boucle while répète un bloc de code tant qu’une condition est vraie.\nAttention aux boucles infinies : assurez-vous que la condition de sortie est atteinte.\n\n\n\n\nContrôle des boucles\n\n\n\n\n\n\n\nInstruction\nDescription\n\n\n\n\nbreak\nInterrompt la boucle immédiatement, même si la condition n’est pas terminée.\n\n\ncontinue\nPasse à l’itération suivante sans exécuter le reste du bloc de code actuel.\n\n\npass\nNe fait rien. Utilisé comme espace réservé dans une boucle ou une condition."
  },
  {
    "objectID": "doc/cours/introduction.html#résumé-1",
    "href": "doc/cours/introduction.html#résumé-1",
    "title": "Introduction à Python : Bases et Structures Fondamentales",
    "section": "4.3 Résumé",
    "text": "4.3 Résumé\n\n\n\n\n\n\n\nStructure\nDescription\n\n\n\n\nif\nExécute un bloc si une condition est vraie.\n\n\nelif\nAjoute des conditions supplémentaires.\n\n\nelse\nDéfinit un bloc exécuté si toutes les conditions sont fausses.\n\n\nfor\nParcourt une séquence ou un intervalle.\n\n\nwhile\nRépète un bloc tant qu’une condition est vraie.\n\n\nbreak\nInterrompt une boucle.\n\n\ncontinue\nSaute à l’itération suivante.\n\n\npass\nNe fait rien (utile pour des blocs vides).\n\n\n\nAvec ces structures, vous pouvez écrire des programmes dynamiques et efficaces en Python !"
  }
]