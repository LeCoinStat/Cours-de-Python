---
title: "Séance 3 : Analyse des données avec NumPy et Pandas"
description: "[Slides](analyse-donnees-numpy-pandas-slides.html)"
author: "Natacha Njongwa Yepnga"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: true
    number-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [NumPy et Pandas](analyse-donnees-numpy-pandas.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: analyse-donnees-numpy-pandas-slides.html
mermaid:
  theme: forest
code-line-numbers: true
from: markdown+emoji
---


# Objectifs du cours

- Comprendre les bases de l'utilisation de NumPy pour manipuler des données numériques.
- Créer, lire, mettre à jour et supprimer des données dans des tableaux multidimensionnels.
- Maîtriser les concepts d'indexation, de slicing et de masques booléens pour extraire des données spécifiques.
- Effectuer des opérations mathématiques et statistiques sur des tableaux pour analyser des données.
- Découvrir la bibliothèque Pandas pour manipuler des données tabulaires de manière efficace.
- Charger, nettoyer et explorer des ensembles de données en utilisant Pandas.
- Comprendre comment combiner NumPy et Pandas pour une analyse de données avancée.


# Objectifs du cours

- Comprendre les bases de l'utilisation de NumPy pour manipuler des données numériques.
- Créer, lire, mettre à jour et supprimer des données dans des tableaux multidimensionnels.
- Maîtriser les concepts d'indexation, de slicing et de masques booléens pour extraire des données spécifiques.
- Effectuer des opérations mathématiques et statistiques sur des tableaux pour analyser des données.
- Découvrir la bibliothèque Pandas pour manipuler des données tabulaires de manière efficace.
- Charger, nettoyer et explorer des ensembles de données en utilisant Pandas.
- Comprendre comment combiner NumPy et Pandas pour une analyse de données avancée.

---

# Première partie : Analyse des données avec NumPy

## Introduction

Dans cette section, nous allons explorer NumPy, une bibliothèque puissante pour le calcul scientifique en Python. En suivant l'approche **CRUD** (Create, Read, Update, Delete), nous apprendrons à manipuler des tableaux multidimensionnels pour réaliser des opérations efficaces sur les données.

L'approche CRUD est un cadre logique utilisé dans de nombreux domaines pour organiser les opérations :
- **Create (Créer) :** Générer de nouveaux tableaux ou structures de données.
- **Read (Lire) :** Accéder aux informations ou explorer des données existantes.
- **Update (Mettre à jour) :** Modifier les éléments de tableaux ou ajuster des valeurs.
- **Delete (Supprimer) :** Retirer des éléments ou réduire des structures pour obtenir des résultats spécifiques.

### Pourquoi utiliser NumPy ?
NumPy est essentiel pour l'analyse de données grâce à :
- **Performance :** Calculs rapides via une implémentation en C.
- **Simplicité :** Opérations optimisées pour manipuler des tableaux multidimensionnels.
- **Richesse fonctionnelle :** Fonctions mathématiques, statistiques, et algébriques avancées.

---

## CRUD avec NumPy

### 1. Create (Créer)
La création de tableaux est le point de départ pour travailler avec NumPy. Voici différentes manières de créer des tableaux :

1. **À partir de listes Python :**
   ```python
   import numpy as np

   # Tableau 1D
   a = np.array([1, 2, 3])

   # Tableau 2D
   b = np.array([[1, 2], [3, 4]])
   ```

2. **Création de tableaux automatiques :**
   - **Zéros et Uns :**
     ```python
     zeros = np.zeros((3, 3))  # Matrice 3x3 de zéros
     ones = np.ones((2, 4))   # Matrice 2x4 de uns
     ```
   - **Plages de valeurs :**
     ```python
     arange = np.arange(0, 10, 2)  # De 0 à 10 par pas de 2
     linspace = np.linspace(0, 1, 5)  # 5 valeurs entre 0 et 1
     ```
   - **Valeurs aléatoires :**
     ```python
     random = np.random.random((2, 3))  # Matrice 2x3 uniforme [0, 1[
     normal = np.random.randn(3, 3)  # Distribution normale centrée sur 0
     ```

---

### 2. Read (Lire)
Lire ou accéder aux données dans un tableau est essentiel pour les analyser :

1. **Accès par index :**
   ```python
   print(a[0])  # Premier élément du tableau 1D
   print(b[1, 1])  # Élément à la deuxième ligne, deuxième colonne
   ```

2. **Slicing (découpage) :**
   ```python
   print(a[:2])  # Les deux premiers éléments
   print(b[:, 1])  # Deuxième colonne
   print(b[0, :])  # Première ligne
   ```

3. **Informations générales :**
   ```python
   print(b.shape)  # Dimensions du tableau
   print(b.size)   # Nombre total d'éléments
   print(b.ndim)   # Nombre de dimensions
   ```

---

### 3. Update (Mettre à jour)
Modifier les données dans un tableau permet de répondre à des besoins d’analyse spécifiques :

1. **Changer un élément :**
   ```python
   a[0] = 10  # Modifier le premier élément
   b[1, 1] = 99  # Modifier un élément spécifique
   ```

2. **Modification conditionnelle :**
   ```python
   a[a > 2] = -1  # Remplacer les valeurs > 2 par -1
   ```

3. **Ajout d’éléments :** Bien que NumPy ne supporte pas directement l’ajout d’éléments, vous pouvez utiliser des fonctions comme `np.append` :
   ```python
   a = np.append(a, [4, 5])
   print(a)  # Nouveau tableau : [10, -1, -1, 4, 5]
   ```

---

### 4. Delete (Supprimer)
Retirer des éléments ou réduire un tableau est utile pour affiner les données :

1. **Supprimer des éléments :**
   ```python
   c = np.delete(a, [0, 1])  # Supprime les deux premiers éléments
   print(c)
   ```

2. **Supprimer des lignes ou colonnes :**
   ```python
   b = np.delete(b, 0, axis=0)  # Supprimer la première ligne
   b = np.delete(b, 1, axis=1)  # Supprimer la deuxième colonne
   print(b)
   ```

---

## Opérations mathématiques et statistiques

### 1. Opérations élémentaires
1. **Calculs simples :**
   ```python
   d = np.array([1, 2, 3])
   print(d + 10)  # Ajouter 10 à chaque élément
   print(d * 2)   # Multiplier chaque élément par 2
   ```

2. **Entre tableaux :**
   ```python
   e = np.array([1, 2, 3])
   f = np.array([4, 5, 6])
   print(e + f)  # Addition
   print(e * f)  # Multiplication
   ```

### 2. Statistiques sur les tableaux
1. **Statistiques globales :**
   ```python
   print(np.sum(d))  # Somme des éléments
   print(np.mean(d))  # Moyenne
   print(np.std(d))   # Écart type
   ```

2. **Statistiques par axes :**
   ```python
   g = np.array([[1, 2], [3, 4]])
   print(np.sum(g, axis=0))  # Somme par colonne
   print(np.mean(g, axis=1))  # Moyenne par ligne
   ```

### 3. Masques booléens
1. **Création de masques :**
   ```python
   mask = d > 1
   print(mask)  # [False, True, True]
   print(d[mask])  # Éléments > 1
   ```

2. **Modification conditionnelle :**
   ```python
   d[d > 1] = 0
   print(d)
   ```

---

## Exercices pratiques

1. **Créer un tableau 2D :**
   - Créez une matrice 3x3 contenant des valeurs aléatoires entre 0 et 1.
   - Calculez la moyenne et remplacez les valeurs inférieures à la moyenne par 0.

2. **Manipulation :**
   - Créez un tableau 1D de 10 éléments.
   - Supprimez les trois derniers éléments et ajoutez deux nouveaux.

3. **Opérations mathématiques :**
   - Créez deux matrices 2x2 et calculez leur produit matriciel.

---

### Conseils pratiques
- **Utilisez les masques :** Simplifiez vos conditions d’analyse.
- **Documentation officielle :** [NumPy Documentation](https://numpy.org/doc/).

