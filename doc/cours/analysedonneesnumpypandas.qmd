---
title: "Séance 3 : Analyse des données avec NumPy et Pandas"
description: "[Slides](analyse-donnees-numpy-pandas-slides.html)"
author: "Natacha Njongwa Yepnga"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: true
    number-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [NumPy et Pandas](analyse-donnees-numpy-pandas.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: analyse-donnees-numpy-pandas-slides.html
mermaid:
  theme: forest
code-line-numbers: true
from: markdown+emoji
---


# Objectifs du cours

- Comprendre les concepts des fonctions en Python : définition, paramètres et valeurs de retour.
- Explorer les fonctions anonymes (lambda) et leur utilisation pratique.
- Différencier les variables locales et globales.
- Maîtriser les listes en compréhension et les dictionnaires en compréhension.
- Structurer un projet Python avec des modules.
- Introduire les bases de la Programmation Orientée Objet (POO).

# Cours : NumPy 201

## Objectifs pédagogiques
- Comprendre les bases de l'utilisation de NumPy.
- Manipuler efficacement des tableaux `array` pour optimiser les calculs.
- Explorer les concepts avancés comme les masques booléens et les opérations mathématiques sur tableaux.

## Plan du cours détaillé (Première partie)

### Introduction à NumPy

#### Qu'est-ce que NumPy ?
- NumPy (Numerical Python) est une bibliothèque fondamentale pour le calcul scientifique en Python.
- Permet de manipuler des tableaux multidimensionnels et d'exécuter des calculs rapides grâce à ses implémentations optimisées.

#### Pourquoi utiliser NumPy ?
- **Performance :** Manipulation rapide des données grâce à des tableaux homogènes.
- **Fonctionnalités :** Offre des outils pour les statistiques, algèbre linéaire, transformations, etc.

### Installation et configuration
1. **Installation de NumPy :**
   - Via pip :
     ```bash
     pip install numpy
     ```
   - Tester l'installation :
     ```python
     import numpy as np
     print(np.__version__)
     ```

2. **Convention d'importation :**
   - Par convention :
     ```python
     import numpy as np
     ```

3. **Configuration de l'environnement :**
   - IDE recommandés : Jupyter Notebook, PyCharm, VS Code.

---

### Création et manipulation des tableaux numériques

#### **1. Création de tableaux (Create)**
1. **Créer un tableau 1D ou 2D :**
   ```python
   # Tableau 1D
   a = np.array([1, 2, 3])

   # Tableau 2D
   b = np.array([[1, 2], [3, 4]])
   ```

2. **Créer des tableaux automatiquement :**
   - **Zeros et Ones :**
     ```python
     zeros = np.zeros((2, 3))  # Matrice 2x3 remplie de zéros
     ones = np.ones((3, 3))   # Matrice 3x3 remplie de uns
     ```
   - **Plages de valeurs :**
     ```python
     arange = np.arange(0, 10, 2)  # De 0 à 10 avec un pas de 2
     linspace = np.linspace(0, 1, 5)  # 5 valeurs entre 0 et 1
     ```
   - **Valeurs aléatoires :**
     ```python
     random = np.random.random((2, 3))  # Matrice 2x3 de valeurs uniformes [0, 1[
     normal = np.random.randn(3, 3)  # Matrice 3x3 selon une distribution normale
     ```

#### **2. Lecture des tableaux (Read)**
1. **Accéder à un élément :**
   ```python
   print(a[0])  # Premier élément du tableau 1D
   print(b[1, 1])  # Deuxième ligne, deuxième colonne
   ```

2. **Slicing :**
   - Extraction de sous-parties :
     ```python
     print(a[:2])  # Les deux premiers éléments
     print(b[:, 1])  # Deuxième colonne
     print(b[0, :])  # Première ligne
     ```

3. **Informations générales :**
   ```python
   print(b.shape)  # Dimensions du tableau
   print(b.size)   # Nombre total d'éléments
   print(b.ndim)   # Nombre de dimensions
   ```

---

### Indexation et opérations sur les tableaux

#### **1. Modification des tableaux (Update)**
1. **Changer un ou plusieurs éléments :**
   ```python
   a[0] = 10  # Remplacer le premier élément par 10
   b[:, 1] = [7, 8]  # Remplacer la deuxième colonne
   ```

2. **Modification conditionnelle :**
   ```python
   a[a > 2] = -1  # Remplacer les valeurs > 2 par -1
   ```

#### **2. Suppression des éléments (Delete)**
1. **Supprimer des éléments (copie) :**
   ```python
   c = np.delete(a, [0, 1])  # Supprimer les deux premiers éléments
   ```

2. **Supprimer des lignes ou colonnes :**
   ```python
   b = np.delete(b, 0, axis=0)  # Supprimer la première ligne
   b = np.delete(b, 1, axis=1)  # Supprimer la deuxième colonne
   ```

---

### Opérations mathématiques sur les tableaux
1. **Opérations élémentaires :**
   ```python
   d = np.array([1, 2, 3])
   print(d + 10)  # Ajouter 10 à chaque élément
   print(d * 2)   # Multiplier chaque élément par 2
   ```

2. **Statistiques :**
   ```python
   print(np.sum(d))  # Somme des éléments
   print(np.mean(d))  # Moyenne
   print(np.max(d))   # Valeur maximale
   ```

3. **Produits matriciels :**
   ```python
   e = np.array([[1, 2], [3, 4]])
   f = np.array([[5, 6], [7, 8]])
   product = np.dot(e, f)  # Produit matriciel
   print(product)
   ```

4. **Masques booléens :**
   ```python
   mask = d > 1
   print(d[mask])  # Affiche les éléments > 1
   ```

---

### Exercices pratiques
1. **Création de tableaux :**
   - Créez un tableau 2D contenant les valeurs de 1 à 9, organisées en une matrice 3x3.
   - Ajoutez 5 à chaque élément de la matrice.

2. **Indexation et slicing :**
   - Accédez à la deuxième ligne de la matrice créée.
   - Remplacez toutes les valeurs supérieures à 7 par 0.

3. **Opérations :**
   - Créez deux matrices aléatoires 3x3.
   - Calculez leur produit matriciel.

---

### Conseils pratiques
- **Préférez les calculs vectoriels :** Les boucles `for` classiques sont plus lentes que les opérations optimisées de NumPy.
- **Documentation officielle :** [Documentation NumPy](https://numpy.org/doc/).

---

Cette première partie du cours couvre les bases de NumPy et prépare les étudiant·e·s à la manipulation avancée des tableaux dans les étapes suivantes.

