---
title: "Les Types de données en Python"
description: "[Slides](typedonnees-slides.html)"
author: "Natacha Njongwa Yepnga"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: true
    number-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Types De Données](typedonnees.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: typedonnees-slides.html
mermaid:
  theme: forest
code-line-numbers: true
from: markdown+emoji
---

Python propose des types de données avancés pour manipuler des collections de données ou des structures complexes. Ces types sont essentiels pour gérer des informations organisées.

---

## Les Listes (`list`)

Les listes sont des **collections ordonnées** et **modifiables**. Elles peuvent contenir des éléments de types différents.

**Caractéristiques :**

- **Ordonnées** : Les éléments conservent leur position dans l'ordre dans lequel ils ont été ajoutés.
- **Modifiables** : Les listes peuvent être modifiées après leur création (ajout, suppression, modification d'éléments).
- **Hétérogènes** : Une liste peut contenir des éléments de différents types.

---

### Création de listes

Les listes peuvent être créées à partir d'une série d'éléments séparés par des virgules et entourés de crochets `[ ]`.

**Exemple :**
```python
fruits = ["pomme", "banane", "cerise"]
nombres = [1, 2, 3, 4]
fruits.append("orange")  # Ajoute un élément
print(fruits)
```

---

### Opérations CRUD sur les Listes en Python

Les opérations **CRUD** (Create, Read, Update, Delete) représentent les actions fondamentales que l'on peut effectuer sur des données dans une application. Ces actions sont souvent utilisées dans la gestion des bases de données, mais elles s'appliquent également aux structures de données comme les listes en Python :

- **Create (Créer)** : Ajouter de nouvelles données.
- **Read (Lire)** : Consulter ou accéder aux données existantes.
- **Update (Mettre à jour)** : Modifier les données existantes.
- **Delete (Supprimer)** : Effacer les données.

Voici comment ces opérations s'appliquent aux listes en Python.


####  Créer une Liste (Create)

Pour créer une liste, utilisez des crochets (`[]`) et séparez les éléments par des virgules.

**Exemple :**
```python
# Créer une liste vide
ma_liste = []

# Créer une liste avec des éléments
fruits = ["pomme", "banane", "cerise"]
print(fruits)  # Affiche : ['pomme', 'banane', 'cerise']
```

### 2. Lire les Données (Read)

#### Accéder à un élément par son index
Les indices commencent à 0.

**Exemple :**
```python
fruits = ["pomme", "banane", "cerise"]
print(fruits[0])  # Affiche : "pomme"
print(fruits[-1])  # Affiche : "cerise" (dernier élément)
```


## Les Tuples (`tuple`)

Les tuples sont des **collections ordonnées**, mais **immuables** (non modifiables après leur création). Ils sont souvent utilisés pour stocker des données constantes.

**Caractéristiques :**

- **Ordonnés** : Les éléments conservent leur position.
- **Immuables** : Impossible de modifier, ajouter ou supprimer des éléments après leur création.

**Exemple :**
```python
coordonnees = (10.5, 42.3)
jours_semaine = ("lundi", "mardi", "mercredi")
print(coordonnees)  # Affiche : (10.5, 42.3)
```
---

## Les Dictionnaires (`dict`)

Les dictionnaires sont des **collections non ordonnées** (dans les versions antérieures à Python 3.7) qui stockent des **paires clé-valeur**. Chaque clé doit être unique.

**Caractéristiques :**

- **Accès rapide** : Vous pouvez accéder rapidement aux valeurs à l'aide de leurs clés.
- **Modifiables** : Vous pouvez ajouter, modifier ou supprimer des paires clé-valeur.
- **Clés uniques** : Une clé ne peut être présente qu'une seule fois.

**Exemple :**
```python
personne = {"nom": "Alice", "age": 25, "ville": "Paris"}
print(personne["nom"])  # Affiche "Alice"

# Modifier la valeur associée à une clé
personne["age"] = 26
print(personne)  # Affiche : {'nom': 'Alice', 'age': 26, 'ville': 'Paris'}
```


##  Les Ensembles (`set`)

Les ensembles sont des **collections non ordonnées** et **uniques** (chaque élément apparaît une seule fois). Ils sont utiles pour éliminer les doublons ou effectuer des opérations mathématiques sur des ensembles.

**Caractéristiques :**

- **Non ordonnés** : Les éléments n'ont pas de position fixe.
- **Éléments uniques** : Les doublons sont automatiquement supprimés.
- **Opérations mathématiques** : Permettent des opérations comme l'union, l'intersection, la différence, etc.

**Exemple :**
```python
lettres = {"a", "b", "c"}
nombres = {1, 2, 3, 2}  # Les doublons sont supprimés
print(nombres)  # Affiche : {1, 2, 3}
```