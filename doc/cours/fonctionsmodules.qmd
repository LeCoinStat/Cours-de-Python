---
title: "Fonctions, Modules et POO en Python"
description: "[Slides](fonctions-modules-poo-slides.html)"
author: "Natacha Njongwa Yepnga"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: true
    number-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Fonctions, Modules et POO](fonctions-modules-poo.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: fonctions-modules-poo-slides.html
mermaid:
  theme: forest
code-line-numbers: true
from: markdown+emoji
---

# Objectifs du cours

- Comprendre les concepts des fonctions en Python : définition, paramètres et valeurs de retour.
- Explorer les fonctions anonymes (lambda) et leur utilisation pratique.
- Différencier les variables locales et globales.
- Maîtriser les listes en compréhension et les dictionnaires en compréhension.
- Structurer un projet Python avec des modules.
- Introduire les bases de la Programmation Orientée Objet (POO).

# Les fonctions en Python

## Les fonctions Python existantes

Python offre une large gamme de fonctions intégrées comme `print()`, `len()`, `type()` ou encore `sum()`. Ces fonctions permettent de réaliser des opérations courantes sans définir de nouvelles fonctions.

** Exemples **:
```python
print("Bonjour")  # Affiche : Bonjour
print(len("Python"))  # Affiche : 6
```

## Fonction simple sans paramètre
Une fonction sans paramètre exécute toujours les mêmes instructions :
```python
def dire_bonjour():
    return "Bonjour !"

print(dire_bonjour())  # Affiche : Bonjour !
```
## Fonction avec paramètres

Une fonction avec paramètres peut être personnalisée selon les valeurs passées :

```python
def saluer(nom):
    return f"Bonjour, {nom}!"

print(saluer("Alice"))  # Affiche : Bonjour, Alice!
```

## Valeur par défaut des paramètres

Les paramètres peuvent avoir des valeurs par défaut :

```python
def saluer(nom, message="Bonjour"):
    return f"{message}, {nom}!"

# Exemple d'utilisation
print(saluer("Jean"))  # Affiche : Bonjour, Jean!
print(saluer("Marie", "Salut"))  # Affiche : Salut, Marie!
```

## Affecter une instance de fonction à une variable

Les fonctions peuvent être assignées à des variables pour être utilisées plus tard :

```python
def addition(a, b):
    return a + b

# Affecter la fonction à une variable
ajouter = addition

# Exemple d'utilisation
print(ajouter(3, 4))  # Affiche : 7
```