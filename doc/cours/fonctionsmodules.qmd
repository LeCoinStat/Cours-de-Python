---
title: "Fonctions, Modules et POO en Python"
description: "[Slides](fonctions-modules-poo-slides.html)"
author: "Natacha Njongwa Yepnga"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: true
    number-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Fonctions, Modules et POO](fonctions-modules-poo.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: fonctions-modules-poo-slides.html
mermaid:
  theme: forest
code-line-numbers: true
from: markdown+emoji
---

# Objectifs du cours

- Comprendre les concepts des fonctions en Python : définition, paramètres et valeurs de retour.
- Explorer les fonctions anonymes (lambda) et leur utilisation pratique.
- Différencier les variables locales et globales.
- Maîtriser les listes en compréhension et les dictionnaires en compréhension.
- Structurer un projet Python avec des modules.
- Introduire les bases de la Programmation Orientée Objet (POO).

# Les fonctions en Python

## Les fonctions Python existantes

Python offre une large gamme de fonctions intégrées comme `print()`, `len()`, `type()` ou encore `sum()`. Ces fonctions permettent de réaliser des opérations courantes sans définir de nouvelles fonctions.

** Exemples **:
```python
print("Bonjour")  # Affiche : Bonjour
print(len("Python"))  # Affiche : 6
```

## Fonction simple sans paramètre
Une fonction sans paramètre exécute toujours les mêmes instructions :
```python
def dire_bonjour():
    return "Bonjour !"

print(dire_bonjour())  # Affiche : Bonjour !
```
## Fonction avec paramètres

Une fonction avec paramètres peut être personnalisée selon les valeurs passées :

```python
def saluer(nom):
    return f"Bonjour, {nom}!"

print(saluer("Alice"))  # Affiche : Bonjour, Alice!
```

## Valeur par défaut des paramètres

Les paramètres peuvent avoir des valeurs par défaut :

```python
def saluer(nom, message="Bonjour"):
    return f"{message}, {nom}!"

# Exemple d'utilisation
print(saluer("Jean"))  # Affiche : Bonjour, Jean!
print(saluer("Marie", "Salut"))  # Affiche : Salut, Marie!
```

## Affecter une instance de fonction à une variable

Les fonctions peuvent être assignées à des variables pour être utilisées plus tard :

```python
def addition(a, b):
    return a + b

# Affecter la fonction à une variable
ajouter = addition

# Exemple d'utilisation
print(ajouter(3, 4))  # Affiche : 7
```

## Fonction avec un nombre variable de paramètres

Une fonction peut accepter un nombre variable d'arguments :

```python
def somme(*args):
    return sum(args)

# Exemple d'utilisation
print(somme(1, 2, 3, 4))  # Affiche : 10
print(somme(5, 10))       # Affiche : 15
```


## Passage des paramètres : immuable et non immuable

Les types immuables comme les nombres ou les chaînes ne peuvent pas être modifiés dans une fonction, alors que les types mutables comme les listes peuvent l'être.

### Exemple :

#### Avec un type immuable (chaîne) :
```python
def modifier_chaine(chaine):
    chaine += " modifié"
    return chaine

texte = "Texte original"
print(modifier_chaine(texte))  # Affiche : Texte original modifié
print(texte)  # Affiche : Texte original
```

### Avec un type mutable (liste) :

```python
def ajouter_element(liste):
    liste.append(5)

ma_liste = [1, 2, 3]
ajouter_element(ma_liste)
print(ma_liste)  # Affiche : [1, 2, 3, 5]
```

## Variable locale/variable globale

- **Variable locale** : Définie à l'intérieur d'une fonction et inaccessible en dehors.
- **Variable globale** : Accessible partout dans le programme.

### Exemple :

#### Variables locale  :
```python
x = 10  # Variable globale

def afficher_variables():
    y = 5  # Variable locale
    print("x =", x)  # Accède à la variable globale
    print("y =", y)  # Accède à la variable locale

afficher_variables()
# print(y)  # Provoque une erreur : y n'est pas défini en dehors de la fonction
```

### Modifier une variable globale :

```python
z = 20  # Variable globale

def modifier_globale():
    global z  # Permet de modifier la variable globale
    z = 30

modifier_globale()
print(z)  # Affiche : 30
```

## Fonction anonyme (lambda function)

Les fonctions lambda sont définies en une seule ligne pour des opérations simples :

```python
# Exemple : Calculer le carré d'un nombre
carre = lambda x: x ** 2
print(carre(4))  # Affiche : 16

# Trier une liste de tuples selon le deuxième élément
nombres = [(1, 2), (3, 1), (5, 0)]
nombres_tries = sorted(nombres, key=lambda x: x[1])
print(nombres_tries)  # Affiche : [(5, 0), (3, 1), (1, 2)]
```