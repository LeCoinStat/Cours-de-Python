---

# TP : Manipulation de tableaux avec NumPy

## Objectifs du TP

- Comprendre l'utilisation du module NumPy pour le calcul scientifique.
- Créer et manipuler des tableaux multidimensionnels.
- Appliquer des opérations mathématiques et statistiques sur des données.
- Explorer les masques booléens pour des filtrages avancés.

## 1. Introduction à NumPy

NumPy (Numerical Python) est une bibliothèque puissante pour manipuler des tableaux et effectuer des calculs scientifiques. Elle est optimisée pour la performance et largement utilisée dans l'analyse de données.

### Pourquoi utiliser NumPy ?

- **Performance :** Calculs rapides grâce à une implémentation en C.
- **Simplicité :** Manipulation intuitive des tableaux multidimensionnels.
- **Richesse fonctionnelle :** Nombreuses fonctions mathématiques, algébriques, et statistiques.

## 2. Création de tableaux

```python
import numpy as np

# Tableau 1D
A = np.array([1, 2, 3])

# Tableau 2D
B = np.array([[1, 2], [3, 4]])
print(A)
print(B)

# Zéros et Uns
zeros = np.zeros((3, 3))
ones = np.ones((2, 4))
print(zeros)
print(ones)

# Valeurs aléatoires
random = np.random.random((3, 3))
print(random)

# Plages de valeurs
arange = np.arange(0, 10, 2)
linspace = np.linspace(0, 1, 5)
print(arange)
print(linspace)

# Informations sur un tableau
print(B.shape)  # Dimensions
print(B.size)   # Nombre d'éléments
print(B.dtype)  # Type des éléments
```

## 3. Accès et modifications

```python
# Accéder aux éléments
print(B[0, 1])
print(B[:, 1])
print(B[1, :])

# Modifier des éléments
B[0, 0] = 100
print(B)

# Ajouter des éléments
A = np.append(A, [4, 5])
print(A)

# Supprimer des éléments
C = np.delete(A, [0, 1])
print(C)
```

## 4. Opérations mathématiques et statistiques

```python
# Opérations arithmétiques
D = B + 10
print(D)

E = B * 2
print(E)

# Statistiques
print(np.sum(B))
print(np.mean(B))
print(np.std(B))

# Masques booléens
mask = B > 2
print(mask)
print(B[mask])

# Modification conditionnelle
B[B > 2] = -1
print(B)
```

## Exercices pratiques

### Exercice 1 : Création et manipulation

#### Solution complète avec explications

**Étape 1 : Création du tableau**
Utilisez `np.random.random` pour générer un tableau 3x3 contenant des valeurs aléatoires entre 0 et 1.

```python
import numpy as np

# Création du tableau
tableau = np.random.random((3, 3))
print("Tableau original :")
print(tableau)
```

**Étape 2 : Remplacement des valeurs**
Les valeurs inférieures à 0.5 sont remplacées par 0 à l'aide d'un masque booléen.

```python
# Remplacement des valeurs < 0.5
tableau[tableau < 0.5] = 0
print("
Tableau après remplacement :")
print(tableau)
```

**Étape 3 : Calcul des statistiques**
Calculez la somme et la moyenne des éléments avec `np.sum` et `np.mean`.

```python
# Calcul des statistiques
somme = np.sum(tableau)
moyenne = np.mean(tableau)
print("
Somme :", somme)
print("Moyenne :", moyenne)
```

#### Résultat attendu (exemple)

- Tableau original :
```
[[0.73 0.12 0.85]
 [0.45 0.67 0.31]
 [0.91 0.02 0.78]]
```
- Tableau après remplacement :
```
[[0.73 0.   0.85]
 [0.   0.67 0.  ]
 [0.91 0.   0.78]]
```
- Somme : 3.94
- Moyenne : 0.437

1. Créez un tableau 3x3 contenant des valeurs aléatoires entre 0 et 1.
2. Remplacez les valeurs inférieures à 0.5 par 0.
3. Calculez la somme et la moyenne des éléments du tableau.

### Exercice 2 : Manipulation avancée

#### Solution détaillée avec exemple de code

**Étape 1 : Création du tableau**
Créez un tableau 1D contenant 10 valeurs aléatoires entre 1 et 100 à l'aide de la fonction `np.random.randint`.

```python
import numpy as np

# Création d'un tableau 1D
tableau = np.random.randint(1, 101, size=10)
print("Tableau original :")
print(tableau)
```

**Étape 2 : Suppression et ajout d'éléments**
Supprimez les trois derniers éléments avec `np.delete`, puis utilisez `np.append` pour ajouter deux nouvelles valeurs.

```python
# Suppression des trois derniers éléments
tableau = np.delete(tableau, [-1, -2, -3])

# Ajout de deux nouvelles valeurs
tableau = np.append(tableau, [200, 300])
print("
Tableau après modifications :")
print(tableau)
```

**Étape 3 : Remplacement des valeurs paires**
Identifiez les éléments pairs avec un masque booléen, puis remplacez-les par -1.

```python
# Remplacement des valeurs paires
mask = tableau % 2 == 0
tableau[mask] = -1
print("
Tableau après remplacement des paires :")
print(tableau)
```

#### Résultat attendu (exemple)

- Tableau original :
```
[12 45 67 89 34 22 19 56 90 78]
```
- Tableau après modifications :
```
[12 45 67 89 34 22 19 -1 -1 -1]
```
- Tableau après remplacement des paires :
```
[-1 45 67 89 -1 -1 19 -1 -1 -1]
```

1. Créez un tableau 1D de 10 éléments entre 1 et 100.
2. Supprimez les trois derniers éléments et ajoutez deux nouveaux.
3. Remplacez les valeurs paires par -1.

### Exercice 3 : Statistiques et masques

#### Solution corrigée avec détails

**Étape 1 : Création de la matrice**
Créez une matrice 4x4 avec des valeurs aléatoires comprises entre -10 et 10 en utilisant `np.random.randint`.

```python
import numpy as np

# Création d'une matrice 4x4
matrice = np.random.randint(-10, 11, size=(4, 4))
print("Matrice originale :")
print(matrice)
```

**Étape 2 : Utilisation d'un masque pour modifier les valeurs négatives**
Identifiez les valeurs négatives avec un masque booléen et remplacez-les par leur valeur absolue en utilisant `np.abs`.

```python
# Remplacement des valeurs négatives par leur valeur absolue
matrice[matrice < 0] = np.abs(matrice[matrice < 0])
print("
Matrice après remplacement des négatifs :")
print(matrice)
```

**Étape 3 : Calcul de la moyenne des valeurs finales**
Utilisez `np.mean` pour calculer la moyenne des éléments de la matrice.

```python
# Calcul de la moyenne
moyenne = np.mean(matrice)
print("
Moyenne des valeurs finales :", moyenne)
```

#### Résultat attendu (exemple)

- Matrice originale :
```
[[ -3   5  -7  10]
 [  2  -6   8  -9]
 [ -1   4  -2   7]
 [ -8   0   6  -4]]
```
- Matrice après remplacement des négatifs :
```
[[ 3  5  7 10]
 [ 2  6  8  9]
 [ 1  4  2  7]
 [ 8  0  6  4]]
```
- Moyenne des valeurs finales :
```
5.25
```

Cette solution montre comment utiliser les masques booléens pour identifier et modifier des valeurs spécifiques dans un tableau, ce qui est une fonctionnalité clé de NumPy pour le traitement efficace des données.

1. Créez une matrice 4x4 contenant des valeurs aléatoires entre -10 et 10.
2. Utilisez un masque pour remplacer les valeurs négatives par leur valeur absolue.
3. Calculez la moyenne des valeurs finales.

## Récapitulatif

- NumPy permet de manipuler efficacement des tableaux pour des calculs rapides.
- Les masques booléens offrent des possibilités puissantes pour le filtrage et la modification des données.
- L'utilisation des opérations vectorisées améliore grandement les performances.

### Ressources supplémentaires

- [Documentation officielle NumPy](https://numpy.org/doc/)

